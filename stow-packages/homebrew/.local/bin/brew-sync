#!/usr/bin/env bash

# Brew Sync - Homebrew Package Management
# Syncs Brewfile with installed packages and manages installations

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
BREWFILE_PATH="$HOME/.config/homebrew/Brewfile"
BACKUP_DIR="$HOME/.homebrew-backups"

# Function to log messages
log() {
    local level="$1"
    shift
    case "$level" in
        "INFO")  echo -e "${BLUE}[INFO]${NC} $*" ;;
        "SUCCESS") echo -e "${GREEN}[SUCCESS]${NC} $*" ;;
        "WARN")  echo -e "${YELLOW}[WARN]${NC} $*" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} $*" ;;
    esac
}

# Function to display usage
usage() {
    cat << EOF
Brew Sync - Homebrew Package Management

Usage: $0 [COMMAND]

COMMANDS:
    install, i      Install packages from Brewfile
    update, u       Update Brewfile from currently installed packages
    sync, s         Update Brewfile and install any new packages
    backup, b       Create backup of current Brewfile
    diff, d         Show differences between Brewfile and installed packages
    clean, c        Remove packages not in Brewfile
    doctor          Run brew doctor and check system health
    help, h         Show this help message

EXAMPLES:
    $0 install      # Install packages from Brewfile
    $0 update       # Update Brewfile with currently installed packages
    $0 sync         # Full sync (update + install)
    $0 diff         # Show what would change
    $0 clean        # Remove unlisted packages

EOF
}

# Function to check if Homebrew is installed
check_homebrew() {
    if ! command -v brew &> /dev/null; then
        log "ERROR" "Homebrew is not installed"
        log "INFO" "Install it from: https://brew.sh"
        exit 1
    fi
}

# Function to check if Brewfile exists
check_brewfile() {
    if [[ ! -f "$BREWFILE_PATH" ]]; then
        log "ERROR" "Brewfile not found: $BREWFILE_PATH"
        log "INFO" "Run '$0 update' to create one from your current installation"
        exit 1
    fi
}

# Function to create backup
create_backup() {
    if [[ -f "$BREWFILE_PATH" ]]; then
        mkdir -p "$BACKUP_DIR"
        local backup_file="$BACKUP_DIR/Brewfile.$(date +%Y%m%d_%H%M%S)"
        cp "$BREWFILE_PATH" "$backup_file"
        log "SUCCESS" "Backup created: $backup_file"
    fi
}

# Function to install packages from Brewfile
install_packages() {
    check_brewfile
    
    log "INFO" "Installing packages from Brewfile..."
    log "INFO" "Brewfile: $BREWFILE_PATH"
    
    if brew bundle install --file="$BREWFILE_PATH"; then
        log "SUCCESS" "All packages installed successfully"
    else
        log "ERROR" "Some packages failed to install"
        exit 1
    fi
}

# Function to update Brewfile from installed packages
update_brewfile() {
    log "INFO" "Updating Brewfile from currently installed packages..."
    
    # Create backup first
    create_backup
    
    # Generate new Brewfile
    if brew bundle dump --file="$BREWFILE_PATH" --force; then
        log "SUCCESS" "Brewfile updated: $BREWFILE_PATH"
        
        # Show what changed
        if [[ -f "$BACKUP_DIR/$(ls -t "$BACKUP_DIR" | head -1)" ]]; then
            local latest_backup="$BACKUP_DIR/$(ls -t "$BACKUP_DIR" | head -1)"
            log "INFO" "Changes made:"
            diff -u "$latest_backup" "$BREWFILE_PATH" | head -20 || true
        fi
    else
        log "ERROR" "Failed to update Brewfile"
        exit 1
    fi
}

# Function to sync (update + install)
sync_packages() {
    log "INFO" "Starting full sync..."
    
    # Update Brewfile first
    update_brewfile
    
    # Then install any new packages
    log "INFO" "Installing any new packages..."
    install_packages
    
    log "SUCCESS" "Sync completed successfully"
}

# Function to show differences
show_diff() {
    check_brewfile
    
    log "INFO" "Checking differences between Brewfile and installed packages..."
    
    # Generate current state
    local temp_brewfile=$(mktemp)
    brew bundle dump --file="$temp_brewfile" --force
    
    log "INFO" "Differences (- = in Brewfile but not installed, + = installed but not in Brewfile):"
    if diff -u "$BREWFILE_PATH" "$temp_brewfile"; then
        log "SUCCESS" "No differences found - system is in sync"
    else
        log "INFO" "Differences found above"
    fi
    
    rm "$temp_brewfile"
}

# Function to clean unused packages
clean_packages() {
    check_brewfile
    
    log "WARN" "This will remove packages not listed in your Brewfile"
    read -p "Are you sure you want to continue? (y/N): " confirm
    
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        log "INFO" "Cleaning unused packages..."
        
        if brew bundle cleanup --file="$BREWFILE_PATH" --force; then
            log "SUCCESS" "Cleanup completed"
        else
            log "ERROR" "Cleanup failed"
            exit 1
        fi
    else
        log "INFO" "Cleanup cancelled"
    fi
}

# Function to run system health check
run_doctor() {
    log "INFO" "Running Homebrew health check..."
    
    echo "=== Brew Doctor ==="
    brew doctor
    
    echo -e "\n=== Brew Config ==="
    brew config
    
    echo -e "\n=== Outdated Packages ==="
    if brew outdated; then
        log "INFO" "Run 'brew upgrade' to update outdated packages"
    else
        log "SUCCESS" "All packages are up to date"
    fi
    
    echo -e "\n=== Brewfile Status ==="
    if [[ -f "$BREWFILE_PATH" ]]; then
        log "SUCCESS" "Brewfile found: $BREWFILE_PATH"
        local package_count=$(grep -E "^(brew|cask|mas)" "$BREWFILE_PATH" | wc -l)
        log "INFO" "Packages in Brewfile: $package_count"
    else
        log "WARN" "Brewfile not found: $BREWFILE_PATH"
    fi
}

# Main function
main() {
    local command="${1:-help}"
    
    # Check prerequisites
    check_homebrew
    
    case "$command" in
        "install"|"i")
            install_packages
            ;;
        "update"|"u")
            update_brewfile
            ;;
        "sync"|"s")
            sync_packages
            ;;
        "backup"|"b")
            create_backup
            ;;
        "diff"|"d")
            show_diff
            ;;
        "clean"|"c")
            clean_packages
            ;;
        "doctor")
            run_doctor
            ;;
        "help"|"h"|*)
            usage
            ;;
    esac
}

# Run main function
main "$@"
