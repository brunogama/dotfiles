#!/usr/bin/env bash

# Dotfiles Help System
# Quick access to system documentation

set -euo pipefail

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Add local man pages to MANPATH if not already there
CURRENT_MANPATH="${MANPATH:-$(manpath 2>/dev/null || echo '/usr/share/man')}"
if [[ ":$CURRENT_MANPATH:" != *":$HOME/.local/share/man:"* ]]; then
    export MANPATH="$HOME/.local/share/man:$CURRENT_MANPATH"
fi

# Function to display available topics
show_topics() {
    echo -e "${BLUE}üìö Available Documentation Topics:${NC}"
    echo ""
    echo -e "${GREEN}Core System:${NC}"
    echo "  dotfiles-system  - Complete system overview"
    echo "  credmatch        - Secure credential management"
    echo "  credfile         - Secure file storage with base64"
    echo "  home-sync        - Environment synchronization"
    echo ""
    echo -e "${GREEN}Configuration:${NC}"
    echo "  work-mode        - Machine-specific configuration"
    echo "  work-secrets     - Work credential functions"
    echo ""
    echo -e "${GREEN}Quick Reference:${NC}"
    echo "  commands         - Common command cheat sheet"
    echo "  setup            - New machine setup guide"
    echo "  security         - Security best practices"
    echo ""
    echo -e "${YELLOW}Usage:${NC}"
    echo "  dotfiles-help <topic>     # Show detailed documentation"
    echo "  dotfiles-help commands    # Quick command reference"
    echo "  dotfiles-help setup       # Setup guide"
    echo ""
    echo -e "${YELLOW}Man Pages:${NC}"
    echo "  man credmatch            # Detailed credmatch manual"
    echo "  man home-sync            # Home sync manual"
    echo "  man work-secrets         # Work secrets manual"
    echo "  man dotfiles-system      # Complete system manual"
}

# Function to show command cheat sheet
show_commands() {
    echo -e "${BLUE}üöÄ Common Commands Cheat Sheet:${NC}"
    echo ""
    echo -e "${GREEN}Credential Management:${NC}"
    echo "  credmatch list \"\$(get-api-key CREDMATCH_MASTER_PASSWORD)\""
    echo "  credmatch store \"\$MASTER_PASS\" \"KEY\" \"value\""
    echo "  credmatch fetch \"\$MASTER_PASS\" \"KEY\""
    echo "  backup-work-secrets      # Backup Keychain to CredMatch"
    echo "  sync-work-secrets        # Sync CredMatch to Keychain"
    echo ""
    echo -e "${GREEN}File Storage:${NC}"
    echo "  credfile put \"key\" /path/to/file    # Store file"
    echo "  credfile get \"key\" /output/path    # Retrieve file"
    echo "  credfile list                       # List stored files"
    echo "  credfile info \"key\"                # File information"
    echo ""
    echo -e "${GREEN}Environment Sync:${NC}"
    echo "  home-sync-up             # Full sync"
    echo "  home-push                # Push changes"
    echo "  home-pull                # Pull changes"
    echo "  home-status              # Show status"
    echo ""
    echo -e "${GREEN}Service Management:${NC}"
    echo "  sync-start               # Start background service"
    echo "  sync-stop                # Stop background service"
    echo "  sync-status              # Service status"
    echo ""
    echo -e "${GREEN}Machine Configuration:${NC}"
    echo "  work-mode on/off         # Toggle work mode"
    echo "  work-mode status         # Check current mode"
    echo "  reload-shell             # Restart shell"
    echo ""
    echo -e "${GREEN}Package Management:${NC}"
    echo "  ./install.sh --list      # List packages"
    echo "  ./install.sh <package>   # Install package"
    echo "  ./sync.sh --status       # Package status"
    echo "  brew-sync sync           # Sync Homebrew packages"
}

# Function to show setup guide
show_setup() {
    echo -e "${BLUE}üõ†Ô∏è  New Machine Setup Guide:${NC}"
    echo ""
    echo -e "${GREEN}Step 1: Clone Repository${NC}"
    echo "  git clone <your-dotfiles-repo> ~/.config"
    echo "  cd ~/.config"
    echo ""
    echo -e "${GREEN}Step 2: Install Core Packages${NC}"
    echo "  ./install.sh zsh git bin sync-service"
    echo ""
    echo -e "${GREEN}Step 3: Configure Sync Service${NC}"
    echo "  home-sync setup"
    echo "  nano ~/.config/sync-service/config.yml"
    echo "  # Set your credential_master_password"
    echo ""
    echo -e "${GREEN}Step 4: Initial Sync${NC}"
    echo "  home-sync sync --dry-run    # Preview"
    echo "  home-sync sync              # Actual sync"
    echo ""
    echo -e "${GREEN}Step 5: Install Background Service${NC}"
    echo "  home-sync-service install"
    echo "  sync-status                 # Verify running"
    echo ""
    echo -e "${GREEN}Step 6: Configure Machine Type${NC}"
    echo "  # For work machines:"
    echo "  work-mode on && reload-shell"
    echo ""
    echo "  # For personal machines:"
    echo "  work-mode off && reload-shell"
    echo ""
    echo -e "${GREEN}Step 7: Install Remaining Packages${NC}"
    echo "  ./install.sh homebrew shell-tools development macos"
    echo ""
    echo -e "${YELLOW}Verification:${NC}"
    echo "  dotfiles-help commands      # Test available commands"
    echo "  home-status                 # Check sync status"
    echo "  credmatch status            # Check credential system"
}

# Function to show security practices
show_security() {
    echo -e "${BLUE}üîí Security Best Practices:${NC}"
    echo ""
    echo -e "${GREEN}Master Password:${NC}"
    echo "  ‚úÖ Use a strong, unique master password (16+ characters)"
    echo "  ‚úÖ Store in macOS Keychain: store-api-key 'CREDMATCH_MASTER_PASSWORD' 'password'"
    echo "  ‚úÖ Never commit master password to Git"
    echo "  ‚ö†Ô∏è  If lost, credentials cannot be recovered"
    echo ""
    echo -e "${GREEN}Repository Security:${NC}"
    echo "  ‚úÖ Keep dotfiles repository private"
    echo "  ‚úÖ Review .gitignore regularly"
    echo "  ‚úÖ Audit Git history for exposed secrets"
    echo "  ‚úÖ Use SSH keys for Git authentication"
    echo ""
    echo -e "${GREEN}Credential Hygiene:${NC}"
    echo "  ‚úÖ Rotate API keys regularly"
    echo "  ‚úÖ Use different keys for dev/staging/prod"
    echo "  ‚úÖ Monitor credential usage and access"
    echo "  ‚úÖ Remove unused credentials promptly"
    echo ""
    echo -e "${GREEN}Machine Security:${NC}"
    echo "  ‚úÖ Enable FileVault disk encryption"
    echo "  ‚úÖ Use strong login passwords"
    echo "  ‚úÖ Enable automatic screen lock"
    echo "  ‚úÖ Keep system and tools updated"
    echo ""
    echo -e "${GREEN}Operational Security:${NC}"
    echo "  ‚úÖ Review sync logs regularly"
    echo "  ‚úÖ Monitor for unauthorized access"
    echo "  ‚úÖ Use work-mode for machine separation"
    echo "  ‚úÖ Test backup/recovery procedures"
}

# Main function
main() {
    local topic="${1:-help}"
    
    case "$topic" in
        "commands"|"cmd"|"cheat")
            show_commands
            ;;
        "setup"|"install"|"new")
            show_setup
            ;;
        "security"|"sec"|"best-practices")
            show_security
            ;;
        "credmatch")
            man credmatch 2>/dev/null || echo "Man page not found. Install with: ./install.sh bin"
            ;;
        "credfile"|"files")
            man credfile 2>/dev/null || echo "Man page not found. Install with: ./install.sh bin"
            ;;
        "home-sync"|"sync")
            man home-sync 2>/dev/null || echo "Man page not found. Install with: ./install.sh sync-service"
            ;;
        "work-secrets"|"work")
            man work-secrets 2>/dev/null || echo "Man page not found. Install with: ./install.sh bin"
            ;;
        "work-mode"|"mode")
            man work-mode 2>/dev/null || echo "Man page not found. Install with: ./install.sh bin"
            ;;
        "system"|"overview")
            man dotfiles-system 2>/dev/null || echo "Man page not found. Install with: ./install.sh bin"
            ;;
        "help"|*)
            show_topics
            ;;
    esac
}

# Run main function
main "$@"
