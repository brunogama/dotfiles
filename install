#!/usr/bin/env bash
# Bruno's Dotfiles - Simple Install Script
# Usage: ./install or curl -fsSL https://raw.githubusercontent.com/brunogama/dotfiles/main/install | bash

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration
REPO_URL="https://github.com/brunogama/dotfiles.git"
DOTFILES_DIR="${DOTFILES_DIR:-$HOME/.config/dotfiles}"
BACKUP_DIR="$HOME/.dotfiles-backup-$(date +%Y%m%d-%H%M%S)"

# Logging functions
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[‚úì]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[!]${NC} $1"; }
log_error() { echo -e "${RED}[‚úó]${NC} $1"; }

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Install dependencies
install_dependencies() {
    log_info "Checking dependencies..."
    
    # Check for macOS
    if [[ "$OSTYPE" != "darwin"* ]]; then
        log_error "This installer is designed for macOS only"
        exit 1
    fi
    
    # Install Xcode Command Line Tools if not present
    if ! xcode-select -p >/dev/null 2>&1; then
        log_info "Installing Xcode Command Line Tools..."
        xcode-select --install
        log_warning "Please complete the Xcode installation and re-run this script"
        exit 1
    fi
    
    # Install Homebrew if not present
    if ! command_exists brew; then
        log_info "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Add Homebrew to PATH for Apple Silicon
        if [[ $(uname -m) == "arm64" ]]; then
            eval "$(/opt/homebrew/bin/brew shellenv)"
        fi
    fi
    
    # Ensure Git is available
    if ! command_exists git; then
        log_info "Installing Git..."
        brew install git
    fi
    
    log_success "Dependencies ready"
}

# Backup existing dotfiles
backup_existing() {
    log_info "Creating backup..."
    mkdir -p "$BACKUP_DIR"
    
    local files=(
        ".zshrc" ".zprofile" ".zpreztorc" ".p10k.zsh"
        ".config/zsh" ".config/git" ".config/homebrew"
    )
    
    for file in "${files[@]}"; do
        if [[ -e "$HOME/$file" ]]; then
            cp -R "$HOME/$file" "$BACKUP_DIR/" 2>/dev/null || true
        fi
    done
    
    log_success "Backup created: $BACKUP_DIR"
}

# Clone repository
clone_dotfiles() {
    log_info "Cloning dotfiles repository..."
    
    if [[ -d "$DOTFILES_DIR" ]]; then
        log_warning "Directory exists. Backing up..."
        mv "$DOTFILES_DIR" "$BACKUP_DIR/dotfiles-old"
    fi
    
    git clone --recurse-submodules "$REPO_URL" "$DOTFILES_DIR"
    cd "$DOTFILES_DIR"
    log_success "Repository cloned"
}

# Install using Makefile
install_dotfiles() {
    log_info "Installing dotfiles..."
    cd "$DOTFILES_DIR"
    
    if [[ -f "Makefile" ]]; then
        # Check if Prezto needs to be installed
        if [[ ! -d "$HOME/.zprezto" ]]; then
            log_info "Prezto not found. Installing..."
            make setup-prezto
        fi
        
        # Install dotfiles
        make install
    else
        log_error "Makefile not found. Installation failed."
        exit 1
    fi
}

# Configure shell
configure_shell() {
    log_info "Configuring shell..."
    
    # Verify ZSH is installed
    local zsh_path
    zsh_path="$(which zsh 2>/dev/null)"
    
    if [[ -z "$zsh_path" ]]; then
        log_error "ZSH not found in PATH"
        return 1
    fi
    
    # Change default shell to zsh
    if [[ "$SHELL" != */zsh ]]; then
        log_info "Changing default shell to zsh..."
        log_warning "This requires your password..."
        
        if chsh -s "$zsh_path" 2>&1; then
            log_success "Shell changed to zsh"
        else
            log_warning "Failed to change shell automatically"
            log_warning "Run manually: chsh -s $zsh_path"
        fi
    else
        log_success "Shell is already zsh"
    fi
}

# Print next steps
print_next_steps() {
    echo ""
    log_success "üéâ Installation complete!"
    echo ""
    
    # Check if ~/.local/bin is in PATH
    if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
        log_warning "‚ö†Ô∏è  ~/.local/bin is NOT in your PATH"
        echo ""
        echo "Add to your PATH by adding this line to ~/.zshrc:"
        echo '  export PATH="$HOME/.local/bin:$PATH"'
        echo ""
    fi
    
    echo "üìã Next steps:"
    echo "  1. Restart terminal or run: source ~/.zshrc"
    echo "  2. Set up sync service: make -C $DOTFILES_DIR install-sync"
    echo "  3. Configure credentials: store-api-key 'KEY_NAME' 'value'"
    echo "  4. View available commands: make -C $DOTFILES_DIR help"
    echo ""
    echo "üìÅ Locations:"
    echo "  Configs:  $DOTFILES_DIR/config/"
    echo "  Scripts:  ~/.local/bin/"
    echo "  Docs:     $DOTFILES_DIR/docs/"
    echo "  Backup:   $BACKUP_DIR"
    echo ""
    log_success "Welcome to your new development environment! üöÄ"
}

# Main installation
main() {
    log_info "üè† Bruno's Dotfiles Installer"
    echo "=============================="
    echo ""
    
    install_dependencies
    backup_existing
    clone_dotfiles
    install_dotfiles
    configure_shell
    print_next_steps
}

# Handle interruption
trap 'log_error "Installation interrupted"; exit 1' INT TERM

# Run if executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
