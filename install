#!/usr/bin/env bash
#
# install - One-command dotfiles installation
#
# Usage: ./install [OPTIONS]

set -euo pipefail

# Script metadata
readonly VERSION="1.0.0"

# Colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No Color

# Flags
DRY_RUN=false
YES=false
SKIP_BREW=false
SKIP_PACKAGES=false
SKIP_LINKS=false
VERBOSE=false

# Detect platform
PLATFORM="$(uname -s | tr '[:upper:]' '[:lower:]')"
case "$PLATFORM" in
    darwin) PLATFORM="darwin" ;;
    linux) PLATFORM="linux" ;;
    *) PLATFORM="unknown" ;;
esac

# Detect dotfiles root
DOTFILES_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Logging functions
log_info() {
    echo -e "${BLUE}ℹ${NC}  $*"
}

log_success() {
    echo -e "${GREEN}✓${NC}  $*"
}

log_warning() {
    echo -e "${YELLOW}⚠${NC}  $*"
}

log_error() {
    echo -e "${RED}✗${NC}  $*"
}

log_phase() {
    echo ""
    echo -e "${CYAN}======================================${NC}"
    echo -e "${CYAN} $*${NC}"
    echo -e "${CYAN}======================================${NC}"
    echo ""
}

log_verbose() {
    if [[ "$VERBOSE" == "true" ]]; then
        log_info "$*"
    fi
}

# Show usage
usage() {
    cat << EOF
install v${VERSION}
One-command dotfiles installation

USAGE:
    ./install [OPTIONS]

OPTIONS:
    --dry-run          Preview what would be done
    --yes              Non-interactive mode (assume yes)
    --skip-brew        Skip Homebrew installation/bundle
    --skip-packages    Skip package installation
    --skip-links       Skip symlink creation
    --verbose          Show detailed output
    --help             Show this help message

EXAMPLES:
    # Interactive installation
    ./install

    # Non-interactive (for CI)
    ./install --yes

    # Preview only
    ./install --dry-run

EXIT CODES:
    0    Success
    1    General error
    2    Prerequisites not met
    3    User cancelled

EOF
}

# Parse arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            --yes)
                YES=true
                shift
                ;;
            --skip-brew)
                SKIP_BREW=true
                shift
                ;;
            --skip-packages)
                SKIP_PACKAGES=true
                shift
                ;;
            --skip-links)
                SKIP_LINKS=true
                shift
                ;;
            --verbose)
                VERBOSE=true
                shift
                ;;
            --help|-h)
                usage
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                usage
                exit 1
                ;;
        esac
    done
}

# Confirm action
confirm() {
    if [[ "$YES" == "true" ]]; then
        return 0
    fi

    local prompt="$1"
    echo -n "$prompt (y/n): "
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        return 0
    fi
    return 1
}

# Check if command exists
command_exists() {
    command -v "$1" &> /dev/null
}

# Phase 1: Pre-flight checks
phase_preflight() {
    log_phase "Phase 1: Pre-flight Checks"

    if [[ ! -d "$DOTFILES_ROOT/.git" ]]; then
        log_error "Not in a git repository"
        log_info "Run this from your dotfiles repository"
        exit 2
    fi
    log_success "Running in git repository"

    if ! command_exists git; then
        log_error "git is not installed"
        exit 2
    fi
    log_success "git is installed"

    log_info "Platform: $PLATFORM"
    log_info "Dotfiles root: $DOTFILES_ROOT"
}

# Phase 2: Homebrew setup (macOS)
phase_homebrew() {
    if [[ "$PLATFORM" != "darwin" ]]; then
        log_info "Skipping Homebrew (not on macOS)"
        return 0
    fi

    if [[ "$SKIP_BREW" == "true" ]]; then
        log_info "Skipping Homebrew (--skip-brew flag)"
        return 0
    fi

    log_phase "Phase 2: Homebrew Setup"

    if command_exists brew; then
        log_success "Homebrew is already installed"
        local brew_version
        brew_version=$(brew --version | head -1)
        log_info "$brew_version"
    else
        log_warning "Homebrew is not installed"

        if [[ "$DRY_RUN" == "true" ]]; then
            log_info "Would install Homebrew"
            return 0
        fi

        if confirm "Install Homebrew now?"; then
            log_info "Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            log_success "Homebrew installed"
        else
            log_warning "Skipped Homebrew installation"
        fi
    fi
}

# Phase 3: Dependencies
phase_dependencies() {
    log_phase "Phase 3: Dependencies"

    # Check jq
    if command_exists jq; then
        log_success "jq is already installed ($(jq --version))"
    else
        log_warning "jq is not installed (required for symlink creation)"

        if [[ "$DRY_RUN" == "true" ]]; then
            log_info "Would install jq"
            return 0
        fi

        if [[ "$PLATFORM" == "darwin" ]]; then
            if command_exists brew; then
                log_info "Installing jq via Homebrew..."
                brew install jq
                log_success "jq installed"
            else
                log_error "Cannot install jq: Homebrew not available"
                exit 2
            fi
        else
            log_error "Please install jq manually:"
            log_info "  Ubuntu/Debian: sudo apt install jq"
            log_info "  CentOS/RHEL: sudo yum install jq"
            log_info "  Arch: sudo pacman -S jq"
            exit 2
        fi
    fi
}

# Phase 4: Homebrew bundle
phase_bundle() {
    if [[ "$PLATFORM" != "darwin" ]]; then
        log_info "Skipping Homebrew bundle (not on macOS)"
        return 0
    fi

    if [[ "$SKIP_BREW" == "true" ]] || [[ "$SKIP_PACKAGES" == "true" ]]; then
        log_info "Skipping Homebrew bundle (--skip-* flag)"
        return 0
    fi

    log_phase "Phase 4: Homebrew Bundle"

    local brewfile="$DOTFILES_ROOT/packages/homebrew/Brewfile"

    if [[ ! -f "$brewfile" ]]; then
        log_warning "Brewfile not found at: $brewfile"
        return 0
    fi

    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "Would run: brew bundle install --file=$brewfile"
        return 0
    fi

    if ! command_exists brew; then
        log_warning "Homebrew not installed, skipping bundle"
        return 0
    fi

    log_info "Installing packages from Brewfile..."
    if brew bundle install --file="$brewfile"; then
        log_success "Homebrew bundle completed"
    else
        log_warning "Some packages may have failed to install"
    fi
}

# Phase 5: Prezto and Powerlevel10k setup
phase_prezto() {
    log_phase "Phase 5: Prezto & Powerlevel10k Setup"

    local prezto_dir="$HOME/.zprezto"
    local p10k_module="$prezto_dir/modules/prompt/external/powerlevel10k"

    # Check if Prezto is installed
    if [[ -d "$prezto_dir" ]]; then
        log_success "Prezto is already installed"
    else
        log_warning "Prezto is not installed"

        if [[ "$DRY_RUN" == "true" ]]; then
            log_info "Would clone Prezto to $prezto_dir"
        else
            if confirm "Install Prezto (zsh framework)?"; then
                log_info "Cloning Prezto..."
                if git clone --recursive https://github.com/sorin-ionescu/prezto.git "$prezto_dir"; then
                    log_success "Prezto installed"
                else
                    log_error "Failed to clone Prezto"
                    exit 1
                fi
            else
                log_warning "Skipped Prezto installation - shell features will be limited"
            fi
        fi
    fi

    # Check if Powerlevel10k is installed
    if [[ -d "$prezto_dir" ]]; then
        if [[ -d "$p10k_module" ]]; then
            log_success "Powerlevel10k theme is installed"
        else
            log_warning "Powerlevel10k theme is not installed"

            if [[ "$DRY_RUN" == "true" ]]; then
                log_info "Would clone Powerlevel10k to $p10k_module"
            else
                if confirm "Install Powerlevel10k theme?"; then
                    log_info "Cloning Powerlevel10k..."
                    mkdir -p "$(dirname "$p10k_module")"
                    if git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "$p10k_module"; then
                        log_success "Powerlevel10k installed"
                    else
                        log_error "Failed to clone Powerlevel10k"
                        exit 1
                    fi
                else
                    log_warning "Skipped Powerlevel10k installation - prompt will use default theme"
                fi
            fi
        fi
    fi

    # Create Prezto runcom symlinks (for files not managed by our dotfiles)
    if [[ -d "$prezto_dir" ]]; then
        log_info "Creating Prezto runcom symlinks..."

        # Only create symlinks for runcoms NOT managed by our dotfiles
        # Our dotfiles manage: .zshenv, .zshrc, .zprofile, .zpreztorc
        # Prezto provides: .zlogin, .zlogout
        local -a prezto_runcoms=("zlogin" "zlogout")

        for runcom in "${prezto_runcoms[@]}"; do
            local source_file="$prezto_dir/runcoms/$runcom"
            local target_file="$HOME/.$runcom"

            if [[ -f "$source_file" ]]; then
                if [[ -L "$target_file" ]] && [[ "$(readlink "$target_file")" == "$source_file" ]]; then
                    log_verbose "Already linked: ~/.$runcom"
                elif [[ "$DRY_RUN" == "true" ]]; then
                    log_info "Would create: ~/.$runcom -> $source_file"
                else
                    ln -sf "$source_file" "$target_file"
                    log_success "Created: ~/.$runcom -> $source_file"
                fi
            fi
        done
    fi
}

# Phase 6: Symlink creation
phase_symlinks() {
    if [[ "$SKIP_LINKS" == "true" ]]; then
        log_info "Skipping symlink creation (--skip-links flag)"
        return 0
    fi

    log_phase "Phase 6: Symlink Creation"

    local linker="$DOTFILES_ROOT/bin/core/link-dotfiles.py"

    if [[ ! -f "$linker" ]]; then
        log_error "link-dotfiles.py script not found: $linker"
        exit 2
    fi

    local link_args=()
    if [[ "$DRY_RUN" == "true" ]]; then
        link_args+=("--dry-run")
    else
        link_args+=("--apply")
    fi
    if [[ "$YES" == "true" ]]; then
        link_args+=("--yes")
    fi
    if [[ "$VERBOSE" == "true" ]]; then
        link_args+=("--verbose")
    fi

    log_info "Running link-dotfiles..."
    if python3 "$linker" "${link_args[@]}"; then
        log_success "Symlinks created successfully"
    else
        log_error "Symlink creation failed"
        exit 1
    fi
}

# Phase 7: Shell configuration
phase_shell() {
    log_phase "Phase 7: Shell Configuration"

    local current_shell="${SHELL##*/}"
    log_info "Current shell: $current_shell"

    # Check for .hushlogin to suppress login messages
    if [[ -f "$HOME/.hushlogin" ]]; then
        log_info ".hushlogin exists - login messages suppressed"
    else
        log_info ".hushlogin not found - login messages will be shown"
        if [[ "$DRY_RUN" != "true" ]]; then
            if confirm "Create .hushlogin to suppress login messages?"; then
                touch "$HOME/.hushlogin"
                log_success "Created ~/.hushlogin"
            else
                log_info "Skipped .hushlogin creation"
            fi
        else
            log_info "Would prompt to create ~/.hushlogin"
        fi
    fi

    case "$current_shell" in
        zsh)
            if [[ -L "$HOME/.config/zsh/.zshrc" ]]; then
                log_success "~/.config/zsh/.zshrc is linked"
            else
                log_warning "~/.config/zsh/.zshrc is not linked"
            fi
            ;;
        bash)
            if [[ -L "$HOME/.bashrc" ]]; then
                log_success "~/.bashrc is linked"
            else
                log_info "~/.bashrc not managed by these dotfiles"
            fi
            ;;
        fish)
            log_info "Fish shell detected"
            ;;
        *)
            log_info "Detected shell: $current_shell"
            ;;
    esac
}

# Phase 8: Performance optimization (zsh)
phase_performance() {
    local current_shell="${SHELL##*/}"

    if [[ "$current_shell" != "zsh" ]]; then
        log_info "Skipping performance optimization (not using zsh)"
        return 0
    fi

    log_phase "Phase 8: Performance Optimization"

    local compile_script="$DOTFILES_ROOT/bin/core/zsh-compile"

    if [[ ! -f "$compile_script" ]]; then
        log_info "zsh-compile not found, skipping compilation"
        return 0
    fi

    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "Would compile zsh configuration files"
        return 0
    fi

    log_info "Compiling zsh configs for faster startup..."

    # Make executable if needed
    chmod +x "$compile_script" 2>/dev/null || true

    # Run compilation
    if command_exists zsh && zsh "$compile_script" &>/dev/null; then
        log_success "Zsh configs compiled to bytecode (.zwc)"
        log_info "Expected startup improvement: 100-200ms"
    else
        log_warning "Could not compile zsh configs (non-critical)"
    fi

    # Show performance info
    echo ""
    log_info "Performance features enabled:"
    echo "  • Lazy loading (mise, rbenv, nvm, sdkman)"
    echo "  • Compiled bytecode configs"
    echo "  • Smart completion caching"
    echo "  • Optimized history (10k entries)"
    echo ""
    log_info "To benchmark: zsh-benchmark"
}

# Show summary
show_summary() {
    log_phase "Installation Complete!"

    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "This was a dry run - no changes were made"
        log_info "Run './install' (without --dry-run) to actually install"
        return
    fi

    echo "Next Steps:"
    echo "  1. Restart your terminal or run: exec ${SHELL##*/}"
    echo "  2. Check environment: work-mode status"
    echo "  3. Verify git config: git config --list"

    # Zsh-specific tips
    if [[ "${SHELL##*/}" == "zsh" ]]; then
        echo ""
        echo "Zsh Performance Tips:"
        echo "  • Benchmark startup: zsh-benchmark"
        echo "  • After config changes: zsh-compile && exec zsh"
        echo "  • Trim history: zsh-trim-history"
        echo "  • Target: < 500ms startup time"
    fi

    echo ""
    echo "For help: ./install --help"
}

# Main execution
main() {
    parse_args "$@"

    # Show banner
    echo "================================================="
    echo " Dotfiles Installation"
    echo "================================================="
    echo ""

    if [[ "$DRY_RUN" == "true" ]]; then
        log_warning "DRY RUN MODE - No changes will be made"
        echo ""
    fi

    # Trap errors
    trap 'log_error "Installation failed"; exit 1' ERR

    # Execute phases
    phase_preflight
    phase_homebrew
    phase_dependencies
    phase_bundle
    phase_prezto
    phase_symlinks
    phase_shell
    phase_performance

    show_summary

    exit 0
}

main "$@"
