#!/usr/bin/env zsh

# Work Secrets Management Functions
# Integrates with your existing credential management scripts

# Colors for output
local RED='\033[0;31m'
local GREEN='\033[0;32m'
local YELLOW='\033[1;33m'
local BLUE='\033[0;34m'
local NC='\033[0m' # No Color

# Function to load work secrets from Keychain
load-work-secrets() {
    local pattern="${1:-.*API_KEY$|.*_TOKEN$|.*_URL$|.*_SECRET$}"
    local quiet="${2:-false}"
    
    if [[ "$quiet" != "true" ]]; then
        echo -e "${BLUE}üîê Loading work secrets from Keychain...${NC}"
    fi
    
    # Check if dump-api-keys script exists
    if ! command -v dump-api-keys &> /dev/null; then
        echo -e "${RED}‚ùå dump-api-keys script not found in PATH${NC}"
        echo -e "${YELLOW}üí° Make sure ~/bin is in your PATH or install the script${NC}"
        return 1
    fi
    
    # Load secrets matching the pattern
    local secrets_output
    if secrets_output=$(dump-api-keys --pattern "$pattern" 2>/dev/null); then
        eval "$secrets_output"
        local count=$(echo "$secrets_output" | grep -c "^export" || echo "0")
        if [[ "$quiet" != "true" ]]; then
            echo -e "${GREEN}‚úÖ Loaded $count work secrets${NC}"
        fi
        return 0
    else
        if [[ "$quiet" != "true" ]]; then
            echo -e "${YELLOW}‚ö†Ô∏è  No work secrets found or access denied${NC}"
        fi
        return 1
    fi
}

# Function to store a new work secret
store-work-secret() {
    local key="$1"
    local value="$2"
    
    if [[ -z "$key" || -z "$value" ]]; then
        echo -e "${RED}Usage: store-work-secret <KEY_NAME> <value>${NC}"
        echo -e "${YELLOW}Example: store-work-secret COMPANY_API_KEY abc123xyz${NC}"
        return 1
    fi
    
    # Check if store-api-key script exists
    if ! command -v store-api-key &> /dev/null; then
        echo -e "${RED}‚ùå store-api-key script not found in PATH${NC}"
        return 1
    fi
    
    echo -e "${BLUE}üîê Storing work secret: $key${NC}"
    if store-api-key "$key" "$value"; then
        echo -e "${GREEN}‚úÖ Secret stored successfully${NC}"
        echo -e "${YELLOW}üí° Run 'load-work-secrets' to refresh your environment${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Failed to store secret${NC}"
        return 1
    fi
}

# Function to get a specific work secret
get-work-secret() {
    local key="$1"
    
    if [[ -z "$key" ]]; then
        echo -e "${RED}Usage: get-work-secret <KEY_NAME>${NC}"
        echo -e "${YELLOW}Example: get-work-secret COMPANY_API_KEY${NC}"
        return 1
    fi
    
    # Check if get-api-key script exists
    if ! command -v get-api-key &> /dev/null; then
        echo -e "${RED}‚ùå get-api-key script not found in PATH${NC}"
        return 1
    fi
    
    if value=$(get-api-key "$key" 2>/dev/null); then
        echo "$value"
        return 0
    else
        echo -e "${RED}‚ùå Secret '$key' not found${NC}" >&2
        return 1
    fi
}

# Function to list available work secrets
list-work-secrets() {
    local pattern="${1:-.*API_KEY$|.*_TOKEN$|.*_URL$|.*_SECRET$}"
    
    echo -e "${BLUE}üîê Available work secrets:${NC}"
    
    # Check if dump-api-keys script exists
    if ! command -v dump-api-keys &> /dev/null; then
        echo -e "${RED}‚ùå dump-api-keys script not found in PATH${NC}"
        return 1
    fi
    
    # Get secrets and extract just the key names
    local secrets_output
    if secrets_output=$(dump-api-keys --pattern "$pattern" 2>/dev/null); then
        echo "$secrets_output" | grep "^export" | sed 's/^export \([^=]*\)=.*/\1/' | while read -r key; do
            echo -e "  ${GREEN}‚úì${NC} $key"
        done
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No work secrets found or access denied${NC}"
        return 1
    fi
}

# Function to backup secrets to credmatch
backup-work-secrets() {
    local master_password="$1"
    
    # Try to get master password from Keychain if not provided
    if [[ -z "$master_password" ]]; then
        master_password=$(get-api-key "CREDMATCH_MASTER_PASSWORD" 2>/dev/null)
        if [[ -z "$master_password" ]]; then
            echo -e "${RED}Usage: backup-work-secrets [master_password]${NC}"
            echo -e "${YELLOW}Master password not found in Keychain. Either provide it as argument or store it:${NC}"
            echo -e "${BLUE}store-api-key 'CREDMATCH_MASTER_PASSWORD' 'your-master-password'${NC}"
            return 1
        fi
        echo -e "${GREEN}‚úÖ Using master password from Keychain${NC}"
    fi
    
    # Check if credmatch script exists
    if ! command -v credmatch &> /dev/null; then
        echo -e "${RED}‚ùå credmatch script not found in PATH${NC}"
        echo -e "${YELLOW}üí° Make sure ~/bin is in your PATH${NC}"
        return 1
    fi
    
    echo -e "${BLUE}üîê Backing up work secrets to credmatch...${NC}"
    
    # Get all work secrets
    local secrets_output
    if secrets_output=$(dump-api-keys --pattern ".*API_KEY$|.*_TOKEN$|.*_URL$|.*_SECRET$" 2>/dev/null); then
        local count=0
        echo "$secrets_output" | grep "^export" | while IFS='=' read -r export_stmt key_value; do
            local key=$(echo "$export_stmt" | sed 's/^export //')
            local value=$(echo "$key_value" | sed 's/^["'\'']\(.*\)["'\'']$/\1/')
            
            if credmatch store "$master_password" "$key" "$value" &>/dev/null; then
                echo -e "  ${GREEN}‚úì${NC} Backed up $key"
                ((count++))
            else
                echo -e "  ${RED}‚úó${NC} Failed to backup $key"
            fi
        done
        echo -e "${GREEN}‚úÖ Backup completed${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No work secrets found to backup${NC}"
        return 1
    fi
}

# Function to sync secrets from credmatch to Keychain
sync-work-secrets() {
    local master_password="$1"
    
    # Try to get master password from Keychain if not provided
    if [[ -z "$master_password" ]]; then
        master_password=$(get-api-key "CREDMATCH_MASTER_PASSWORD" 2>/dev/null)
        if [[ -z "$master_password" ]]; then
            echo -e "${RED}Usage: sync-work-secrets [master_password]${NC}"
            echo -e "${YELLOW}Master password not found in Keychain. Either provide it as argument or store it:${NC}"
            echo -e "${BLUE}store-api-key 'CREDMATCH_MASTER_PASSWORD' 'your-master-password'${NC}"
            return 1
        fi
        echo -e "${GREEN}‚úÖ Using master password from Keychain${NC}"
    fi
    
    # Check if credmatch script exists
    if ! command -v credmatch &> /dev/null; then
        echo -e "${RED}‚ùå credmatch script not found in PATH${NC}"
        return 1
    fi
    
    echo -e "${BLUE}üîê Syncing work secrets from credmatch...${NC}"
    
    # First sync the credmatch repository
    if credmatch sync &>/dev/null; then
        echo -e "${GREEN}‚úÖ Credmatch repository synced${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Could not sync credmatch repository${NC}"
    fi
    
    # List available secrets in credmatch and sync them
    if credmatch list "$master_password" 2>/dev/null | while IFS='=' read -r key value; do
        if [[ -n "$key" && -n "$value" ]]; then
            if store-api-key "$key" "$value" &>/dev/null; then
                echo -e "  ${GREEN}‚úì${NC} Synced $key to Keychain"
            else
                echo -e "  ${RED}‚úó${NC} Failed to sync $key"
            fi
        fi
    done; then
        echo -e "${GREEN}‚úÖ Sync completed${NC}"
        echo -e "${YELLOW}üí° Run 'load-work-secrets' to refresh your environment${NC}"
    else
        echo -e "${RED}‚ùå Failed to sync secrets${NC}"
        return 1
    fi
}

# Auto-completion for work secrets functions
_work_secrets_completion() {
    local secrets
    if command -v dump-api-keys &> /dev/null; then
        secrets=($(dump-api-keys --pattern ".*API_KEY$|.*_TOKEN$|.*_URL$|.*_SECRET$" 2>/dev/null | grep "^export" | sed 's/^export \([^=]*\)=.*/\1/'))
        compadd -a secrets
    fi
}

# Register completions
compdef _work_secrets_completion get-work-secret
