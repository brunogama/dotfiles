name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  validate:
    name: Validate
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          brew install shellcheck jq
          python -m pip install --upgrade pip

      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.0

      - name: Validate MINDSET rules
        run: |
          echo "Checking for uppercase directories..."
          bin/git/hooks/check-lowercase-dirs
          
          echo "Checking for emojis..."
          git ls-files | while read file; do
            if [[ -f "$file" ]] && [[ "$file" =~ \.(md|sh|zsh|bash|txt)$ ]]; then
              bin/git/hooks/check-no-emojis "$file" || exit 1
            fi
          done

      - name: Validate LinkingManifest.json
        if: hashFiles('LinkingManifest.json') != ''
        run: |
          bin/git/hooks/validate-manifest

      - name: Shellcheck all scripts
        run: |
          find bin/ -type f -name "*.sh" -o -name "*.bash" -o -name "*.zsh" | \
          while read script; do
            echo "Checking: $script"
            shellcheck --severity=error "$script" || exit 1
          done

      - name: Test installation script syntax
        run: |
          bash -n install
          echo "Installation script syntax is valid"

      - name: Validate OpenSpec proposals
        if: hashFiles('openspec/changes/**/*.md') != ''
        run: |
          if command -v openspec &>/dev/null; then
            for proposal in openspec/changes/*/; do
              proposal_name=$(basename "$proposal")
              echo "Validating: $proposal_name"
              openspec validate "$proposal_name" --strict || exit 1
            done
          else
            echo "OpenSpec not available, skipping validation"
          fi

  test-macos:
    name: Test on macOS
    runs-on: macos-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test dry-run installation
        run: |
          ./install --dry-run

      - name: Test link-dotfiles
        run: |
          bin/core/link-dotfiles --dry-run

      - name: Test script help messages
        run: |
          for script in bin/core/* bin/credentials/* bin/git/*; do
            if [[ -x "$script" ]] && [[ -f "$script" ]]; then
              echo "Testing: $(basename $script)"
              "$script" --help &>/dev/null || echo "No help: $script"
            fi
          done

  test-linux:
    name: Test on Linux
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq shellcheck

      - name: Test dry-run installation
        run: |
          ./install --dry-run

      - name: Test link-dotfiles
        run: |
          bin/core/link-dotfiles --dry-run

  test-python:
    name: Test Python Packages
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Test home-sync package
        run: |
          cd bin/core/home_sync
          uv pip install -e ".[dev]"

          # Run all tests with coverage
          uv run pytest tests/ -v --cov=home_sync --cov-report=term-missing --cov-report=xml

          # Verify minimum coverage (91%)
          uv run coverage report --fail-under=91

      - name: Run mypy strict type checking
        run: |
          cd bin/core/home_sync
          uv run mypy home_sync --strict

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./bin/core/home_sync/coverage.xml
          flags: home-sync
          name: home-sync-coverage

  mutation-testing:
    name: Mutation Testing
    runs-on: ubuntu-latest
    needs: test-python

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Run mutation tests on home-sync
        run: |
          cd bin/core/home_sync
          uv pip install -e ".[dev]"
          uv pip install mutmut

          # Run mutmut on core modules
          uv run mutmut run --paths-to-mutate=home_sync/ --tests-dir=tests/ || true

          # Show results
          uv run mutmut results
          uv run mutmut html

          # Verify minimum mutation score (80%)
          score=$(uv run mutmut results | grep -oP 'survived: \K\d+' || echo "0")
          total=$(uv run mutmut results | grep -oP 'total: \K\d+' || echo "1")
          mutation_score=$((100 - (score * 100 / total)))

          echo "Mutation score: ${mutation_score}%"

          if [[ $mutation_score -lt 80 ]]; then
            echo "ERROR: Mutation score below 80% threshold"
            exit 1
          fi

      - name: Upload mutation test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: mutation-test-results
          path: bin/core/home_sync/html/

  documentation:
    name: Check Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for broken markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          config-file: '.github/markdown-link-check.json'
        continue-on-error: true

      - name: Validate documentation structure
        run: |
          required_docs=(
            "README.md"
            "MINDSET.MD"
            "AGENTS.md"
            "ONBOARDING.md"
          )

          for doc in "${required_docs[@]}"; do
            if [[ ! -f "$doc" ]]; then
              echo "ERROR: Missing required documentation: $doc"
              exit 1
            fi
          done

          echo "All required documentation present"

      - name: Check for TODO/FIXME comments
        run: |
          todos=$(grep -r "TODO\|FIXME" bin/ zsh/ git/ --exclude-dir=.git || true)
          if [[ -n "$todos" ]]; then
            echo "Found TODO/FIXME comments:"
            echo "$todos"
          fi
