---
description: Template for creating new Cursor rules with optimized YAML structure for LLM processing
globs: **/**
alwaysApply: true
---

# Cursor Rule Creation Template

**CRITICAL! READ THE FULL YAML FOR CREATING A NEW RULE**

```yaml
template_name: "cursor_rule_creation_template"
template_description: "Template for creating new Cursor rules with optimized YAML structure for LLM processing"
template_purpose: "Guide AI behavior for specific file patterns and project conventions"
file_extension: ".mdc"
always_apply_default: true
activation: [[ LLM: Agent detects user intent to create a new rule - responds to the user: Whats the rule you have in mind? When user responds create the rule by this specificationi document ]]

rule_structure_components:
  - component: "yaml_frontmatter"
    required: true
    description: "YAML frontmatter must be first content with no leading characters"
    fields:
      - field: "description"
        requirement: "Clear, concise description starting with action words"
        max_length: 100
      - field: "globs"
        requirement: "Specific file patterns that trigger rule activation"
        examples:
          - "**/*.swift"
          - "Core/**/*.swift"
          - "Apps/**/Package.swift"
          - "**/*.{json,yaml,yml}"
      - field: "alwaysApply"
        default: false
        requirement: "Set to true only for critical universal rules"

  - component: "content_organization"
    sections:
      - "introduction_problem"
      - "pattern_description"
      - "implementation_steps"
      - "real_world_examples"
      - "common_pitfalls"

rule_types:
  global_rules:
    purpose: "Critical universal guidelines"
    activation: "Always included in context"
    best_practice: "Keep concise, use sparingly"
    yaml_setting: "alwaysApply: true"

  automatic_rules:
    purpose: "File-type specific guidance"
    activation: "When working with matching files"
    best_practice: "Focus on universal patterns for file types"
    example_glob: "**/*.swift"

  agent_requested_rules:
    purpose: "Detailed guidance for specific tasks"
    activation: "AI may choose based on description and task"
    best_practice: "Include detailed examples and clear descriptions"
    example_description: "Guidance for API design when creating endpoints"

  manual_rules:
    purpose: "Situational instructions requiring human activation"
    activation: "Only when explicitly invoked"
    best_practice: "Can be verbose, highly detailed"
    yaml_setting: "alwaysApply: false, empty globs"

yaml_frontmatter_guidelines:
  critical_requirements:
    - "YAML frontmatter must be absolute first content"
    - "No leading spaces, lines, or characters"
    - "Use UTF-8 encoding for proper parsing"

  description_field:
    style: "action-oriented"
    start_with: "Guidelines for... or Instructions on..."
    max_length: 100
    requirement: "Include key terms that help AI selection"

  globs_patterns:
    principle: "More specific patterns avoid unintended overlaps"
    examples:
      - pattern: "**/*.swift"
        description: "All Swift files"
      - pattern: "Core/**/*.swift"
        description: "Core module Swift files"
      - pattern: "Apps/**/Package.swift"
        description: "App package files"
      - pattern: "**/*.{json,yaml,yml}"
        description: "Configuration files"

  always_apply_setting:
    default: false
    use_true_for: "Only critical universal guidelines"
    impact: "Always consumes AI context when true"

advanced_features:
  file_references:
    syntax: "@file"
    guidelines:
      - "Use relative paths from .cursor/rules/"
      - "Include only essential context files"
      - "Avoid excessive context to prevent overload"
      - "Place after frontmatter, before main content"
    example: "@file ../Package.swift"

  code_block_formatting:
    requirement: "Always use language-specific fenced blocks"
    example: |
      ```swift
      func example() -> String {
          return "Properly formatted Swift code"
      }
      ```
    requirements:
      - "Use language specifiers for syntax highlighting"
      - "Keep examples focused and relevant"
      - "Include comments for clarity"

best_practices:
  rule_design_principles:
    - principle: "specificity"
      description: "Use narrow, focused globs to avoid overlaps"
    - principle: "modularity"
      description: "Break complex domains into smaller, focused rules"
    - principle: "clarity"
      description: "Write descriptions that help AI selection"
    - principle: "maintenance"
      description: "Keep rules updated as conventions evolve"

  content_guidelines:
    - guideline: "action-oriented"
      description: "Use 'prefer', 'consider', 'typically' over rigid commands"
    - guideline: "pattern-focused"
      description: "Define repeatable patterns, not one-off fixes"
    - guideline: "example-rich"
      description: "Include real code examples from the repository"
    - guideline: "error-prevention"
      description: "Document common pitfalls and solutions"

  team_collaboration:
    - practice: "version_control"
      description: "Commit .cursor/rules to repository"
    - practice: "conventions"
      description: "Establish naming and structuring standards"
    - practice: "review_process"
      description: "Consider code reviews for important rules"
    - practice: "onboarding"
      description: "Use rules as living documentation"

troubleshooting:
  common_issues:
    - issue: "rule_not_activating"
      cause: "Check YAML frontmatter is first content"
    - issue: "pattern_mismatch"
      cause: "Verify globs correctly match target files"
    - issue: "file_path_errors"
      cause: "Ensure @file directives use correct relative paths"
    - issue: "encoding_issues"
      cause: "Use UTF-8 encoding for all .mdc files"

  rule_selection_logic:
    - factor: "specificity"
      description: "More specific globs preferred over broad patterns"
    - factor: "description_quality"
      description: "Clear descriptions help AI selection"
    - factor: "context_impact"
      description: "Consider how many rules activate simultaneously"

swift_rule_example:
  yaml_frontmatter: |
    ---
    description: Guidelines for Swift module structure and Package.swift organization
    globs: **/Package.swift
    alwaysApply: false
    ---

  content_structure:
    - section: "introduction"
      description: "Defines standard patterns for Swift module organization"
    - section: "pattern_description"
      includes:
        - "Package.swift structure"
        - "Directory structure"
    - section: "implementation_steps"
      steps:
        - "Create Package.swift with proper dependencies"
        - "Organize Sources/ModuleName/ with logical subdirectories"
        - "Include test target with matching structure"
        - "Use relative paths for internal dependencies"
    - section: "real_world_examples"
      files:
        - "@Core/Commons/Package.swift"
        - "@Apps/BaseApp/Package.swift"
    - section: "common_pitfalls"
      pitfalls:
        - "Missing test targets in Package.swift"
        - "Incorrect dependency paths"
        - "Overly complex module structure"
        - "Missing platform specifications"

minimal_rule_template: |
  ---
  description: Guidelines for [purpose]
  globs: [pattern]
  alwaysApply: false
  ---

  # [Rule Name]

  ## Introduction / Problem

  [Why this rule exists and what problem it solves.]

  ## Pattern Description

  [Explain the pattern with code examples.]

  ## Real-World Examples

  * @Link to code

  ## Common Pitfalls

  * [Common mistake 1]
  * [Common mistake 2]

dependencies:
    - ai/my-prompts/template-format.md
```
