#!/bin/bash
#
# store-api-key - Store API keys securely in macOS Keychain
# Usage: store-api-key <service_name> <api_key> [--force]
# Example: store-api-key SERVICEA_API_KEY randomapikey
#
# This script uses the macOS security command to store API keys
# in the user's login keychain securely.

set -euo pipefail

# Script name for error messages
readonly SCRIPT_NAME="$(basename "$0")"

# Default settings
FORCE_UPDATE=false

# Function to display usage information
usage() {
    cat << EOF
Usage: $SCRIPT_NAME <service_name> <api_key> [--force]

Store an API key securely in the macOS Keychain.

Arguments:
  service_name    The name/identifier for the API key (e.g., SERVICEA_API_KEY)
  api_key         The API key value to store

Options:
  --force         Override existing key without confirmation

Example:
  $SCRIPT_NAME SERVICEA_API_KEY randomapikey
  $SCRIPT_NAME SERVICEA_API_KEY newkey --force

Notes:
  - The key is stored in the user's login keychain
  - If a key with the same service name exists, you'll be prompted to confirm unless --force is used
  - The script requires macOS and the 'security' command
EOF
    exit 1
}

# Function to display error messages
error() {
    echo "Error: $1" >&2
    exit "${2:-1}"
}

# Check if running on macOS
if [[ "$OSTYPE" != "darwin"* ]]; then
    error "This script requires macOS" 2
fi

# Check if security command is available
if ! command -v security &> /dev/null; then
    error "The 'security' command is not available" 2
fi

# Parse arguments
if [[ $# -lt 2 || $# -gt 3 ]]; then
    usage
fi

# Check for force flag
if [[ $# -eq 3 && "$3" == "--force" ]]; then
    FORCE_UPDATE=true
elif [[ $# -eq 3 ]]; then
    error "Unknown option: $3" 1
fi

# Assign arguments to variables
readonly SERVICE_NAME="$1"
readonly API_KEY="$2"

# Validate service name
if [[ -z "$SERVICE_NAME" ]]; then
    error "Service name cannot be empty" 3
fi

# Validate API key
if [[ -z "$API_KEY" ]]; then
    error "API key cannot be empty" 3
fi

# Validate service name format (alphanumeric, underscore, dash)
if ! [[ "$SERVICE_NAME" =~ ^[A-Za-z0-9_-]+$ ]]; then
    error "Service name must contain only letters, numbers, underscores, and dashes" 3
fi

# Check if the key already exists in the keychain
if security find-generic-password -s "$SERVICE_NAME" &>/dev/null; then
    if [[ "$FORCE_UPDATE" == false ]]; then
        read -p "API key '$SERVICE_NAME' already exists in keychain. Overwrite? (y/n): " confirm
        if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
            echo "Operation cancelled. API key not updated."
            exit 0
        fi
    fi
    echo "Updating existing API key for '$SERVICE_NAME'..."
else
    echo "Creating new API key for '$SERVICE_NAME'..."
fi

# Store the API key in the keychain
# -a: account name (using current user)
# -s: service name
# -w: password/secret
# -U: update if exists
if security add-generic-password \
    -a "$USER" \
    -s "$SERVICE_NAME" \
    -w "$API_KEY" \
    -U \
    2>/dev/null; then
    echo "âœ… Successfully stored API key for '$SERVICE_NAME' in keychain"
else
    error "Failed to store API key in keychain" 4
fi
