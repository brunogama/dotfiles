#!/usr/bin/env bash
set -euo pipefail

# Run integration tests for dotfiles repository
# Usage: ./bin/test/run-tests [OPTIONS] [PATTERN]
#
# Options:
#   --help          Show this help message
#   --verbose       Show verbose test output
#   --tap           Output in TAP format
#   --parallel N    Run tests in parallel (N jobs)
#   --timing        Show timing information
#   --filter REGEX  Only run tests matching regex
#
# Examples:
#   ./bin/test/run-tests                    # Run all tests
#   ./bin/test/run-tests --verbose          # Verbose output
#   ./bin/test/run-tests core               # Run only core tests
#   ./bin/test/run-tests --filter "git-wip" # Run tests matching pattern

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default options
VERBOSE=false
TAP_OUTPUT=false
PARALLEL=1
SHOW_TIMING=false
FILTER=""
PATTERN=""

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --help)
            grep '^#' "$0" | sed 's/^# //' | sed 's/^#//'
            exit 0
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --tap)
            TAP_OUTPUT=true
            shift
            ;;
        --parallel)
            PARALLEL="$2"
            shift 2
            ;;
        --timing)
            SHOW_TIMING=true
            shift
            ;;
        --filter)
            FILTER="$2"
            shift 2
            ;;
        *)
            PATTERN="$1"
            shift
            ;;
    esac
done

# Check for bats
if ! command -v bats &> /dev/null; then
    echo -e "${RED}Error: bats-core is not installed${NC}"
    echo "Install with: brew install bats-core"
    exit 1
fi

# Get repository root
REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
cd "$REPO_ROOT"

# Build test file list
TEST_FILES=()
if [[ -n "$PATTERN" ]]; then
    # Run tests matching pattern
    while IFS= read -r -d '' file; do
        TEST_FILES+=("$file")
    done < <(find tests/integration -name "*${PATTERN}*.bats" -print0 2>/dev/null)
else
    # Run all tests
    while IFS= read -r -d '' file; do
        TEST_FILES+=("$file")
    done < <(find tests/integration -name "*.bats" -print0 2>/dev/null)
fi

if [[ ${#TEST_FILES[@]} -eq 0 ]]; then
    echo -e "${YELLOW}No test files found${NC}"
    exit 1
fi

echo -e "${BLUE}Running ${#TEST_FILES[@]} test file(s)...${NC}"
echo

# Build bats command
BATS_ARGS=()

if [[ "$TAP_OUTPUT" == "true" ]]; then
    BATS_ARGS+=(--tap)
elif [[ "$VERBOSE" == "true" ]]; then
    BATS_ARGS+=(--verbose-run)
fi

if [[ "$SHOW_TIMING" == "true" ]]; then
    BATS_ARGS+=(--timing)
fi

if [[ "$FILTER" != "" ]]; then
    BATS_ARGS+=(--filter "$FILTER")
fi

if [[ "$PARALLEL" -gt 1 ]]; then
    BATS_ARGS+=(--jobs "$PARALLEL")
fi

# Run tests
START_TIME=$(date +%s)

if bats "${BATS_ARGS[@]}" "${TEST_FILES[@]}"; then
    EXIT_CODE=0
    echo
    echo -e "${GREEN}All tests passed!${NC}"
else
    EXIT_CODE=$?
    echo
    echo -e "${RED}Some tests failed${NC}"
fi

END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

echo
echo -e "${BLUE}Test run completed in ${DURATION}s${NC}"

exit $EXIT_CODE
