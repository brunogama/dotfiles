#!/usr/bin/env bash
set -euo pipefail

# Automated dependency update checker

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_ROOT="$(cd "${SCRIPT_DIR}/../.." && pwd)"

# Colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

usage() {
    cat <<EOF
Usage: dependency-checker [COMMAND] [OPTIONS]

Commands:
    check-homebrew      Check for outdated Homebrew packages
    check-python        Check for outdated Python packages
    check-npm           Check for outdated npm packages
    check-ruby          Check for outdated Ruby gems
    check-all           Check all package managers
    help                Show this help message

Options:
    --format FORMAT     Output format (text, json, markdown)
    --update-policy     Show update policy for each package

Examples:
    dependency-checker check-homebrew
    dependency-checker check-all --format json
    dependency-checker check-python --update-policy

EOF
}

# Check Homebrew packages
check_homebrew() {
    local format="${1:-text}"

    echo -e "${BLUE}Checking Homebrew packages...${NC}\n"

    if ! command -v brew &> /dev/null; then
        echo -e "${RED}[ERROR]${NC} Homebrew not installed"
        return 1
    fi

    # Get outdated packages
    local outdated
    outdated=$(brew outdated --json 2>/dev/null || echo "[]")

    if [[ "${format}" == "json" ]]; then
        echo "${outdated}"
        return 0
    fi

    # Parse and display
    local count
    count=$(echo "${outdated}" | jq -r '.formulae | length')

    if (( count == 0 )); then
        echo -e "${GREEN}[OK]${NC} All Homebrew packages are up to date"
        return 0
    fi

    echo -e "${YELLOW}${count} outdated packages found:${NC}\n"

    echo "${outdated}" | jq -r '.formulae[] | "  \(.name)
    Current: \(.installed_versions[0])
    Latest:  \(.current_version)"'

    return 0
}

# Check Python packages
check_python() {
    local format="${1:-text}"

    echo -e "${BLUE}Checking Python packages...${NC}\n"

    if ! command -v pip3 &> /dev/null; then
        echo -e "${RED}[ERROR]${NC} pip3 not installed"
        return 1
    fi

    # Get outdated packages
    local outdated
    outdated=$(pip3 list --outdated --format=json 2>/dev/null || echo "[]")

    if [[ "${format}" == "json" ]]; then
        echo "${outdated}"
        return 0
    fi

    # Parse and display
    local count
    count=$(echo "${outdated}" | jq -r '. | length')

    if (( count == 0 )); then
        echo -e "${GREEN}[OK]${NC} All Python packages are up to date"
        return 0
    fi

    echo -e "${YELLOW}${count} outdated packages found:${NC}\n"

    echo "${outdated}" | jq -r '.[] | "  \(.name)
    Current: \(.version)
    Latest:  \(.latest_version)"'

    return 0
}

# Check npm packages
check_npm() {
    local format="${1:-text}"

    echo -e "${BLUE}Checking npm packages...${NC}\n"

    if ! command -v npm &> /dev/null; then
        echo -e "${RED}[ERROR]${NC} npm not installed"
        return 1
    fi

    # Check if package.json exists
    if [[ ! -f "${PROJECT_ROOT}/package.json" ]]; then
        echo -e "${YELLOW}[WARNING]${NC}  No package.json found"
        return 0
    fi

    # Get outdated packages
    local outdated
    outdated=$(npm outdated --json 2>/dev/null || echo "{}")

    if [[ "${format}" == "json" ]]; then
        echo "${outdated}"
        return 0
    fi

    # Parse and display
    local count
    count=$(echo "${outdated}" | jq -r '. | length')

    if (( count == 0 )); then
        echo -e "${GREEN}[OK]${NC} All npm packages are up to date"
        return 0
    fi

    echo -e "${YELLOW}${count} outdated packages found:${NC}\n"

    echo "${outdated}" | jq -r 'to_entries[] | "  \(.key)
    Current: \(.value.current)
    Latest:  \(.value.latest)"'

    return 0
}

# Check Ruby gems
check_ruby() {
    local format="${1:-text}"

    echo -e "${BLUE}Checking Ruby gems...${NC}\n"

    if ! command -v gem &> /dev/null; then
        echo -e "${RED}[ERROR]${NC} gem not installed"
        return 1
    fi

    # Get outdated gems
    local outdated
    outdated=$(gem outdated --local 2>/dev/null || echo "")

    if [[ -z "${outdated}" ]]; then
        echo -e "${GREEN}[OK]${NC} All Ruby gems are up to date"
        return 0
    fi

    echo -e "${YELLOW}Outdated gems:${NC}\n"
    echo "${outdated}"

    return 0
}

# Check all package managers
check_all() {
    local format="${1:-text}"

    echo -e "${BLUE}═══════════════════════════════════════${NC}"
    echo -e "${BLUE}  Dependency Update Check${NC}"
    echo -e "${BLUE}═══════════════════════════════════════${NC}\n"

    check_homebrew "${format}"
    echo ""

    check_python "${format}"
    echo ""

    check_npm "${format}"
    echo ""

    check_ruby "${format}"

    echo -e "\n${BLUE}═══════════════════════════════════════${NC}"
}

# Main command dispatcher
main() {
    if [[ $# -eq 0 ]]; then
        check_all "text"
        exit 0
    fi

    local command="${1}"
    shift

    local format="text"

    while [[ $# -gt 0 ]]; do
        case "${1}" in
            --format) format="${2}"; shift 2 ;;
            --update-policy) shift ;; # TODO: Implement
            *) echo "Unknown option: ${1}"; usage; exit 1 ;;
        esac
    done

    case "${command}" in
        check-homebrew)
            check_homebrew "${format}"
            ;;
        check-python)
            check_python "${format}"
            ;;
        check-npm)
            check_npm "${format}"
            ;;
        check-ruby)
            check_ruby "${format}"
            ;;
        check-all)
            check_all "${format}"
            ;;
        help|--help|-h)
            usage
            ;;
        *)
            echo "Unknown command: ${command}"
            usage
            exit 1
            ;;
    esac
}

main "$@"
