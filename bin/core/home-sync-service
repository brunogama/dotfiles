#!/usr/bin/env bash

# Home Sync Service Management
# Manages the macOS LaunchAgent for home-sync

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SERVICE_NAME="com.brunogama.home-sync"
DOTFILES_ROOT="${DOTFILES_ROOT:-$HOME/.config-fixing-dot-files-bugs}"
PLIST_SOURCE="$DOTFILES_ROOT/packages/syncservice/$SERVICE_NAME.plist"
PLIST_TARGET="$HOME/Library/LaunchAgents/$SERVICE_NAME.plist"

# Function to log messages
log() {
    local level="$1"
    shift
    case "$level" in
        "INFO")  echo -e "${BLUE}[INFO]${NC} $*" ;;
        "SUCCESS") echo -e "${GREEN}[SUCCESS]${NC} $*" ;;
        "WARN")  echo -e "${YELLOW}[WARN]${NC} $*" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} $*" ;;
    esac
}

# Function to display usage
usage() {
    cat << EOF
Home Sync Service Management

Usage: $0 [COMMAND]

COMMANDS:
    install     Install the service (copy plist and load)
    uninstall   Uninstall the service (unload and remove plist)
    start       Start the service
    stop        Stop the service
    restart     Restart the service
    status      Show service status
    logs        Show service logs
    enable      Enable auto-start on login
    disable     Disable auto-start on login
    help        Show this help message

EXAMPLES:
    $0 install      # Install and start the service
    $0 status       # Check if service is running
    $0 logs         # View service logs
    $0 restart      # Restart the service

EOF
}

# Function to check if service is loaded
is_service_loaded() {
    launchctl list | grep -q "$SERVICE_NAME" 2>/dev/null
}

# Function to check if service is running
is_service_running() {
    if is_service_loaded; then
        local status=$(launchctl list "$SERVICE_NAME" 2>/dev/null | grep -E "PID|LastExitStatus" || echo "")
        if echo "$status" | grep -q '"PID"'; then
            return 0
        fi
    fi
    return 1
}

# Function to install service
install_service() {
    log "INFO" "Installing home sync service..."
    
    # Check if source plist exists
    if [[ ! -f "$PLIST_SOURCE" ]]; then
        log "ERROR" "Service plist not found: $PLIST_SOURCE"
        log "INFO" "Make sure the sync-service package is installed: ./install.sh sync-service"
        return 1
    fi
    
    # Create LaunchAgents directory if it doesn't exist
    mkdir -p "$(dirname "$PLIST_TARGET")"
    
    # Copy plist to LaunchAgents
    cp "$PLIST_SOURCE" "$PLIST_TARGET"
    log "SUCCESS" "Service plist installed: $PLIST_TARGET"
    
    # Load the service
    if launchctl load "$PLIST_TARGET"; then
        log "SUCCESS" "Service loaded successfully"
    else
        log "ERROR" "Failed to load service"
        return 1
    fi
    
    # Start the service
    if launchctl start "$SERVICE_NAME"; then
        log "SUCCESS" "Service started successfully"
    else
        log "WARN" "Service loaded but failed to start (this is normal if already running)"
    fi
    
    log "SUCCESS" "Home sync service installation completed"
    return 0
}

# Function to uninstall service
uninstall_service() {
    log "INFO" "Uninstalling home sync service..."
    
    # Stop the service if running
    if is_service_loaded; then
        log "INFO" "Stopping service..."
        launchctl stop "$SERVICE_NAME" 2>/dev/null || true
        
        log "INFO" "Unloading service..."
        launchctl unload "$PLIST_TARGET" 2>/dev/null || true
    fi
    
    # Remove plist file
    if [[ -f "$PLIST_TARGET" ]]; then
        rm "$PLIST_TARGET"
        log "SUCCESS" "Service plist removed"
    fi
    
    log "SUCCESS" "Home sync service uninstalled"
    return 0
}

# Function to start service
start_service() {
    if is_service_loaded; then
        if launchctl start "$SERVICE_NAME"; then
            log "SUCCESS" "Service started"
        else
            log "WARN" "Service start command sent (may already be running)"
        fi
    else
        log "ERROR" "Service not installed. Run 'home-sync-service install' first."
        return 1
    fi
}

# Function to stop service
stop_service() {
    if is_service_loaded; then
        if launchctl stop "$SERVICE_NAME"; then
            log "SUCCESS" "Service stopped"
        else
            log "WARN" "Service stop command sent"
        fi
    else
        log "ERROR" "Service not installed"
        return 1
    fi
}

# Function to restart service
restart_service() {
    log "INFO" "Restarting service..."
    stop_service
    sleep 2
    start_service
}

# Function to show service status
show_status() {
    log "INFO" "Home Sync Service Status"
    echo
    
    if [[ -f "$PLIST_TARGET" ]]; then
        echo "Service plist: ✅ Installed"
    else
        echo "Service plist: ❌ Not installed"
    fi
    
    if is_service_loaded; then
        echo "Service loaded: ✅ Yes"
        
        # Get detailed status
        local status_output=$(launchctl list "$SERVICE_NAME" 2>/dev/null || echo "")
        if [[ -n "$status_output" ]]; then
            echo "Service details:"
            echo "$status_output" | sed 's/^/  /'
        fi
        
        if is_service_running; then
            echo "Service status: ✅ Running"
        else
            echo "Service status: ⚠️  Loaded but not running"
        fi
    else
        echo "Service loaded: ❌ No"
        echo "Service status: ❌ Not running"
    fi
    
    echo
    echo "Configuration:"
    echo "  Source plist: $PLIST_SOURCE"
    echo "  Target plist: $PLIST_TARGET"
    echo "  Service name: $SERVICE_NAME"
    
    # Check if home-sync command is available
    echo
    if command -v home-sync &> /dev/null; then
        echo "home-sync command: ✅ Available"
        home-sync status 2>/dev/null || echo "  (Unable to get detailed status)"
    else
        echo "home-sync command: ❌ Not available in PATH"
    fi
}

# Function to show logs
show_logs() {
    local log_files=(
        "$HOME/.config/home-sync/logs/daemon.out"
        "$HOME/.config/home-sync/logs/daemon.err"
        "$HOME/.config/home-sync/logs/sync.log"
    )
    
    log "INFO" "Home sync service logs:"
    echo
    
    for log_file in "${log_files[@]}"; do
        if [[ -f "$log_file" ]]; then
            echo "=== $(basename "$log_file") (last 20 lines) ==="
            tail -20 "$log_file"
            echo
        else
            echo "=== $(basename "$log_file") ==="
            echo "Log file not found: $log_file"
            echo
        fi
    done
    
    # Also show system logs for the service
    echo "=== System logs (last 10 entries) ==="
    log show --predicate 'process == "home-sync"' --last 1h --max-events 10 2>/dev/null || \
        echo "Unable to retrieve system logs"
}

# Function to enable auto-start
enable_service() {
    if [[ -f "$PLIST_TARGET" ]]; then
        # Reload to ensure auto-start is enabled
        launchctl unload "$PLIST_TARGET" 2>/dev/null || true
        if launchctl load "$PLIST_TARGET"; then
            log "SUCCESS" "Service enabled for auto-start on login"
        else
            log "ERROR" "Failed to enable service"
            return 1
        fi
    else
        log "ERROR" "Service not installed. Run 'home-sync-service install' first."
        return 1
    fi
}

# Function to disable auto-start
disable_service() {
    if is_service_loaded; then
        if launchctl unload "$PLIST_TARGET"; then
            log "SUCCESS" "Service disabled (will not auto-start on login)"
        else
            log "ERROR" "Failed to disable service"
            return 1
        fi
    else
        log "INFO" "Service already disabled"
    fi
}

# Main function
main() {
    local command="${1:-help}"
    
    case "$command" in
        "install")
            install_service
            ;;
        "uninstall")
            uninstall_service
            ;;
        "start")
            start_service
            ;;
        "stop")
            stop_service
            ;;
        "restart")
            restart_service
            ;;
        "status")
            show_status
            ;;
        "logs")
            show_logs
            ;;
        "enable")
            enable_service
            ;;
        "disable")
            disable_service
            ;;
        "help"|*)
            usage
            ;;
    esac
}

# Run main function
main "$@"
