#!/usr/bin/env bash

# Home Sync Service Management
# Manages the macOS LaunchAgent for home-sync

set -euo pipefail

# Version
readonly VERSION="2.0.0"

# Colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Constants
readonly SERVICE_NAME="com.brunogama.home-sync"
readonly RESTART_DELAY=2
readonly LOG_TAIL_LINES=20
readonly SYSTEM_LOG_DURATION="1h"
readonly SYSTEM_LOG_MAX_EVENTS=10
readonly MIN_MACOS_VERSION="10.13"

# Function to detect dotfiles root dynamically
detect_dotfiles_root() {
    local script_real
    script_real="$(readlink -f "${BASH_SOURCE[0]}" 2>/dev/null || \
                  greadlink -f "${BASH_SOURCE[0]}" 2>/dev/null || \
                  realpath "${BASH_SOURCE[0]}" 2>/dev/null || \
                  echo "${BASH_SOURCE[0]}")"

    local dotfiles_root
    dotfiles_root="$(cd "$(dirname "$script_real")/../.." && pwd)"

    if [[ -d "$dotfiles_root/.git" ]] && [[ -d "$dotfiles_root/bin/core" ]]; then
        echo "$dotfiles_root"
        return 0
    fi

    if [[ -n "${DOTFILES_ROOT:-}" ]] && [[ -d "$DOTFILES_ROOT/.git" ]]; then
        echo "$DOTFILES_ROOT"
        return 0
    fi

    return 1
}

# Configuration
DOTFILES_ROOT="$(detect_dotfiles_root)"
readonly PLIST_SOURCE="$DOTFILES_ROOT/packages/syncservice/$SERVICE_NAME.plist"
readonly PLIST_TARGET="$HOME/Library/LaunchAgents/$SERVICE_NAME.plist"
readonly HOME_SYNC_BIN="$HOME/.local/bin/home-sync"
readonly LOG_DIR="$HOME/.config/sync-service/logs"

# Function to log messages (output to stderr to avoid conflicts with macOS log command)
log() {
    local level="$1"
    shift
    case "$level" in
        "INFO")  echo -e "${BLUE}[INFO]${NC} $*" >&2 ;;
        "SUCCESS") echo -e "${GREEN}[SUCCESS]${NC} $*" >&2 ;;
        "WARN")  echo -e "${YELLOW}[WARN]${NC} $*" >&2 ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} $*" >&2 ;;
    esac
}

# Function to check prerequisites
check_prerequisites() {
    local errors=0

    # Check if running on macOS
    if [[ "$(uname -s)" != "Darwin" ]]; then
        log "ERROR" "This script only works on macOS"
        ((errors++))
    fi

    # Check macOS version
    local macos_version
    macos_version="$(sw_vers -productVersion 2>/dev/null || echo "0.0.0")"
    if [[ "$(echo -e "$macos_version\n$MIN_MACOS_VERSION" | sort -V | head -n1)" != "$MIN_MACOS_VERSION" ]]; then
        log "ERROR" "Requires macOS $MIN_MACOS_VERSION or later (found: $macos_version)"
        ((errors++))
    fi

    # Check if launchctl is available
    if ! command -v launchctl &>/dev/null; then
        log "ERROR" "launchctl command not found"
        ((errors++))
    fi

    # Check if dotfiles root is valid
    if [[ ! -d "$DOTFILES_ROOT" ]]; then
        log "ERROR" "Dotfiles root not found: $DOTFILES_ROOT"
        ((errors++))
    fi

    # Check if home-sync exists
    if [[ ! -f "$HOME_SYNC_BIN" ]] && [[ ! -f "$DOTFILES_ROOT/bin/core/home-sync" ]]; then
        log "ERROR" "home-sync script not found"
        log "INFO" "Expected at: $HOME_SYNC_BIN or $DOTFILES_ROOT/bin/core/home-sync"
        ((errors++))
    fi

    return "$errors"
}

# Function to display usage
usage() {
    cat << EOF
Home Sync Service Management v$VERSION

Usage: $0 [COMMAND]

COMMANDS:
    install     Install the service (copy plist and load)
    uninstall   Uninstall the service (unload and remove plist)
    start       Start the service
    stop        Stop the service
    restart     Restart the service
    status      Show service status
    logs        Show service logs
    enable      Enable auto-start on login
    disable     Disable auto-start on login
    version     Show version information
    help        Show this help message

EXAMPLES:
    $0 install      # Install and start the service
    $0 status       # Check if service is running
    $0 logs         # View service logs
    $0 restart      # Restart the service

CONFIGURATION:
    Service name: $SERVICE_NAME
    Dotfiles root: $DOTFILES_ROOT
    Plist source: $PLIST_SOURCE
    Plist target: $PLIST_TARGET
    Log directory: $LOG_DIR

EOF
}

# Function to show version
show_version() {
    cat << EOF
home-sync-service version $VERSION

Configuration:
  Service name: $SERVICE_NAME
  Dotfiles root: $DOTFILES_ROOT
  Home sync binary: $HOME_SYNC_BIN
  Plist source: $PLIST_SOURCE
  Plist target: $PLIST_TARGET
  Log directory: $LOG_DIR

System:
  macOS version: $(sw_vers -productVersion 2>/dev/null || echo "unknown")
  launchctl: $(command -v launchctl || echo "not found")

EOF
}

# Function to check if service is loaded
is_service_loaded() {
    launchctl list | grep -q "$SERVICE_NAME" 2>/dev/null
}

# Function to check if service is running
is_service_running() {
    if is_service_loaded; then
        local status
        status=$(launchctl list "$SERVICE_NAME" 2>/dev/null | grep -E "PID|LastExitStatus" || echo "")
        if echo "$status" | grep -q '"PID"'; then
            return 0
        fi
    fi
    return 1
}

# Function to install service
install_service() {
    log "INFO" "Installing home sync service..."

    # Run prerequisite checks
    if ! check_prerequisites; then
        log "ERROR" "Prerequisite checks failed"
        return 1
    fi

    # Check if service is already installed
    if [[ -f "$PLIST_TARGET" ]]; then
        log "WARN" "Service already installed at: $PLIST_TARGET"
        log "INFO" "Use 'restart' to reload or 'uninstall' first to reinstall"
        return 1
    fi

    # Check if source plist exists
    if [[ ! -f "$PLIST_SOURCE" ]]; then
        log "ERROR" "Service plist not found: $PLIST_SOURCE"
        log "INFO" "Make sure the sync-service package is installed"
        log "INFO" "Expected location: $PLIST_SOURCE"
        return 1
    fi

    # Validate plist file
    if ! plutil -lint "$PLIST_SOURCE" &>/dev/null; then
        log "ERROR" "Invalid plist file: $PLIST_SOURCE"
        return 1
    fi

    # Create log directory
    if [[ ! -d "$LOG_DIR" ]]; then
        log "INFO" "Creating log directory: $LOG_DIR"
        mkdir -p "$LOG_DIR" || {
            log "ERROR" "Failed to create log directory"
            return 1
        }
    fi

    # Create LaunchAgents directory if it doesn't exist
    local launch_agents_dir
    launch_agents_dir="$(dirname "$PLIST_TARGET")"
    if [[ ! -d "$launch_agents_dir" ]]; then
        log "INFO" "Creating LaunchAgents directory: $launch_agents_dir"
        mkdir -p "$launch_agents_dir" || {
            log "ERROR" "Failed to create LaunchAgents directory"
            return 1
        }
    fi

    # Copy plist to LaunchAgents
    if cp "$PLIST_SOURCE" "$PLIST_TARGET"; then
        log "SUCCESS" "Service plist installed: $PLIST_TARGET"
    else
        log "ERROR" "Failed to copy plist file"
        return 1
    fi

    # Set proper permissions
    chmod 644 "$PLIST_TARGET" || {
        log "WARN" "Failed to set plist permissions (continuing anyway)"
    }

    # Load the service
    if launchctl load "$PLIST_TARGET" 2>&1; then
        log "SUCCESS" "Service loaded successfully"
    else
        log "ERROR" "Failed to load service"
        log "INFO" "You may need to check Console.app for detailed error messages"
        return 1
    fi

    # Give it a moment to start
    sleep 1

    # Verify service is loaded
    if is_service_loaded; then
        log "SUCCESS" "Service verified as loaded"
    else
        log "ERROR" "Service failed to load properly"
        return 1
    fi

    # Start the service
    if launchctl start "$SERVICE_NAME" 2>&1; then
        log "SUCCESS" "Service started successfully"
    else
        log "WARN" "Service loaded but failed to start (may already be running)"
    fi

    log "SUCCESS" "Home sync service installation completed"
    log "INFO" "Use 'home-sync-service status' to check service status"
    log "INFO" "Use 'home-sync-service logs' to view service logs"
    return 0
}

# Function to uninstall service
uninstall_service() {
    log "INFO" "Uninstalling home sync service..."

    # Check if service is installed
    if [[ ! -f "$PLIST_TARGET" ]]; then
        log "INFO" "Service not installed (plist not found)"
        return 0
    fi

    # Stop the service if running
    if is_service_loaded; then
        log "INFO" "Stopping service..."
        if ! launchctl stop "$SERVICE_NAME" 2>/dev/null; then
            log "WARN" "Failed to stop service (may not be running)"
        fi

        log "INFO" "Unloading service..."
        if ! launchctl unload "$PLIST_TARGET" 2>/dev/null; then
            log "WARN" "Failed to unload service"
        fi

        # Wait a moment for cleanup
        sleep 1
    fi

    # Verify service is unloaded
    if is_service_loaded; then
        log "ERROR" "Service still loaded after unload attempt"
        log "INFO" "Try: launchctl remove $SERVICE_NAME"
        return 1
    fi

    # Remove plist file
    if [[ -f "$PLIST_TARGET" ]]; then
        if rm "$PLIST_TARGET"; then
            log "SUCCESS" "Service plist removed: $PLIST_TARGET"
        else
            log "ERROR" "Failed to remove plist file"
            return 1
        fi
    fi

    log "SUCCESS" "Home sync service uninstalled"
    log "INFO" "Log files preserved at: $LOG_DIR"
    return 0
}

# Function to start service
start_service() {
    if ! is_service_loaded; then
        log "ERROR" "Service not installed. Run 'home-sync-service install' first."
        return 1
    fi

    if is_service_running; then
        log "INFO" "Service is already running"
        return 0
    fi

    if launchctl start "$SERVICE_NAME" 2>&1; then
        log "SUCCESS" "Service started"

        # Wait and verify
        sleep 1
        if is_service_running; then
            log "SUCCESS" "Service verified as running"
        else
            log "WARN" "Service started but not running (check logs for errors)"
        fi
    else
        log "ERROR" "Failed to start service"
        return 1
    fi
    return 0
}

# Function to stop service
stop_service() {
    if ! is_service_loaded; then
        log "ERROR" "Service not installed"
        return 1
    fi

    if ! is_service_running; then
        log "INFO" "Service is not running"
        return 0
    fi

    if launchctl stop "$SERVICE_NAME" 2>&1; then
        log "SUCCESS" "Service stopped"

        # Wait and verify
        sleep 1
        if is_service_running; then
            log "WARN" "Service may still be running (check status)"
        else
            log "SUCCESS" "Service verified as stopped"
        fi
    else
        log "ERROR" "Failed to stop service"
        return 1
    fi
    return 0
}

# Function to restart service
restart_service() {
    log "INFO" "Restarting service..."

    if ! stop_service; then
        log "ERROR" "Failed to stop service"
        return 1
    fi

    log "INFO" "Waiting ${RESTART_DELAY}s before restart..."
    sleep "$RESTART_DELAY"

    if ! start_service; then
        log "ERROR" "Failed to start service"
        return 1
    fi

    log "SUCCESS" "Service restarted successfully"
    return 0
}

# Function to show service status
show_status() {
    log "INFO" "Home Sync Service Status (v$VERSION)"
    echo

    # Installation status
    if [[ -f "$PLIST_TARGET" ]]; then
        echo "Service plist: ✅ Installed"
        if plutil -lint "$PLIST_TARGET" &>/dev/null; then
            echo "  Plist valid: ✅ Yes"
        else
            echo "  Plist valid: ❌ No (corrupted)"
        fi
    else
        echo "Service plist: ❌ Not installed"
    fi

    # Load status
    if is_service_loaded; then
        echo "Service loaded: ✅ Yes"

        # Get detailed status
        local status_output
        status_output=$(launchctl list "$SERVICE_NAME" 2>/dev/null || echo "")
        if [[ -n "$status_output" ]]; then
            echo "Service details:"
            echo "$status_output" | awk '{print "  " $0}'
        fi

        # Running status
        if is_service_running; then
            echo "Service status: ✅ Running"
        else
            echo "Service status: ⚠️  Loaded but not running"

            # Check for recent errors
            local exit_status
            exit_status=$(echo "$status_output" | grep -o '"LastExitStatus" = [0-9]*' | grep -o '[0-9]*' || echo "")
            if [[ -n "$exit_status" ]] && [[ "$exit_status" != "0" ]]; then
                echo "  Last exit status: $exit_status (error)"
            fi
        fi
    else
        echo "Service loaded: ❌ No"
        echo "Service status: ❌ Not running"
    fi

    # Configuration
    echo
    echo "Configuration:"
    echo "  Service name: $SERVICE_NAME"
    echo "  Dotfiles root: $DOTFILES_ROOT"
    echo "  Source plist: $PLIST_SOURCE"
    echo "  Target plist: $PLIST_TARGET"
    echo "  Log directory: $LOG_DIR"

    # Home-sync availability
    echo
    if [[ -f "$HOME_SYNC_BIN" ]]; then
        echo "home-sync binary: ✅ Available at $HOME_SYNC_BIN"
        if [[ -x "$HOME_SYNC_BIN" ]]; then
            echo "  Executable: ✅ Yes"

            # Try to get version from home-sync
            if "$HOME_SYNC_BIN" version &>/dev/null; then
                local hs_version
                hs_version=$("$HOME_SYNC_BIN" version 2>/dev/null | head -1 || echo "unknown")
                echo "  Version: $hs_version"
            fi
        else
            echo "  Executable: ❌ No (check permissions)"
        fi
    else
        echo "home-sync binary: ❌ Not found at $HOME_SYNC_BIN"
    fi

    # Log files status
    echo
    echo "Log files:"
    local daemon_out="$LOG_DIR/daemon.out"
    local daemon_err="$LOG_DIR/daemon.err"

    if [[ -f "$daemon_out" ]]; then
        local size
        size=$(du -h "$daemon_out" | cut -f1)
        echo "  daemon.out: ✅ $size"
    else
        echo "  daemon.out: ❌ Not found"
    fi

    if [[ -f "$daemon_err" ]]; then
        local size lines
        size=$(du -h "$daemon_err" | cut -f1)
        lines=$(wc -l < "$daemon_err" | tr -d ' ')
        echo "  daemon.err: $size ($lines lines)"
        if [[ "$lines" -gt 0 ]]; then
            echo "    ⚠️  Contains error messages"
        fi
    else
        echo "  daemon.err: ❌ Not found"
    fi
}

# Function to show logs
show_logs() {
    local num_lines="${1:-$LOG_TAIL_LINES}"

    log "INFO" "Home sync service logs (showing last $num_lines lines):"
    echo

    # Define log files to check
    local -a log_files=(
        "$LOG_DIR/daemon.out"
        "$LOG_DIR/daemon.err"
        "$LOG_DIR/sync.log"
    )

    local found_logs=0

    for log_file in "${log_files[@]}"; do
        local basename_log
        basename_log="$(basename "$log_file")"

        if [[ -f "$log_file" ]]; then
            local size lines
            size=$(du -h "$log_file" | cut -f1)
            lines=$(wc -l < "$log_file" | tr -d ' ')

            echo "=== $basename_log ($size, $lines lines) ==="

            if [[ "$lines" -eq 0 ]]; then
                echo "(empty)"
            else
                tail -n "$num_lines" "$log_file"
            fi
            echo
            ((found_logs++))
        else
            echo "=== $basename_log ==="
            echo "Log file not found: $log_file"
            echo
        fi
    done

    if [[ "$found_logs" -eq 0 ]]; then
        log "WARN" "No log files found at: $LOG_DIR"
        echo
    fi

    # Show system logs for the service
    echo "=== System logs (last $SYSTEM_LOG_MAX_EVENTS entries from last $SYSTEM_LOG_DURATION) ==="
    if command -v log &>/dev/null; then
        if ! log show --predicate 'process == "home-sync"' \
                --last "$SYSTEM_LOG_DURATION" \
                --max-events "$SYSTEM_LOG_MAX_EVENTS" 2>/dev/null; then
            echo "Unable to retrieve system logs (may require elevated permissions)"
        fi
    else
        echo "macOS 'log' command not available"
    fi
    echo

    log "INFO" "To view more lines: $0 logs <number>"
    log "INFO" "To follow logs in real-time: tail -f $LOG_DIR/daemon.out"
}

# Function to enable auto-start
enable_service() {
    if [[ ! -f "$PLIST_TARGET" ]]; then
        log "ERROR" "Service not installed. Run 'home-sync-service install' first."
        return 1
    fi

    # Validate plist
    if ! plutil -lint "$PLIST_TARGET" &>/dev/null; then
        log "ERROR" "Plist file is corrupted: $PLIST_TARGET"
        return 1
    fi

    # Unload first if already loaded
    if is_service_loaded; then
        log "INFO" "Reloading service to enable auto-start..."
        launchctl unload "$PLIST_TARGET" 2>/dev/null || true
        sleep 1
    fi

    # Load with auto-start enabled
    if launchctl load "$PLIST_TARGET" 2>&1; then
        log "SUCCESS" "Service enabled for auto-start on login"

        # Verify it loaded
        if is_service_loaded; then
            log "SUCCESS" "Service verified as loaded"
        else
            log "ERROR" "Service failed to load"
            return 1
        fi
    else
        log "ERROR" "Failed to enable service"
        return 1
    fi

    return 0
}

# Function to disable auto-start
disable_service() {
    if [[ ! -f "$PLIST_TARGET" ]]; then
        log "INFO" "Service not installed (already disabled)"
        return 0
    fi

    if is_service_loaded; then
        log "INFO" "Disabling service auto-start..."
        if launchctl unload "$PLIST_TARGET" 2>&1; then
            log "SUCCESS" "Service disabled (will not auto-start on login)"

            # Verify it unloaded
            sleep 1
            if is_service_loaded; then
                log "WARN" "Service may still be loaded (check status)"
            else
                log "SUCCESS" "Service verified as unloaded"
            fi
        else
            log "ERROR" "Failed to disable service"
            return 1
        fi
    else
        log "INFO" "Service already disabled"
    fi

    return 0
}

# Main function
main() {
    local command="${1:-help}"
    shift || true

    case "$command" in
        "install")
            install_service
            ;;
        "uninstall")
            uninstall_service
            ;;
        "start")
            start_service
            ;;
        "stop")
            stop_service
            ;;
        "restart")
            restart_service
            ;;
        "status")
            show_status
            ;;
        "logs")
            show_logs "$@"
            ;;
        "enable")
            enable_service
            ;;
        "disable")
            disable_service
            ;;
        "version")
            show_version
            ;;
        "help")
            usage
            ;;
        *)
            log "ERROR" "Unknown command: $command"
            echo
            usage
            exit 1
            ;;
    esac
}

# Trap errors
trap 'log "ERROR" "Script failed at line $LINENO with exit code $?"' ERR

# Run main function
main "$@"
