#!/usr/bin/env zsh
#
# zsh-benchmark - Measure and analyze zsh startup performance
# Version: 1.0
#
# Usage: zsh-benchmark [--detailed]
#

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m'

DETAILED=false

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --detailed|-d)
            DETAILED=true
            shift
            ;;
        --help|-h)
            cat << EOF
${BOLD}zsh-benchmark${NC} - Measure zsh startup performance

${GREEN}USAGE:${NC}
  zsh-benchmark [options]

${GREEN}OPTIONS:${NC}
  --detailed, -d    Show detailed profiling with zprof
  --help, -h        Show this help

${GREEN}EXAMPLES:${NC}
  # Quick benchmark (10 runs)
  zsh-benchmark

  # Detailed profiling (function-by-function)
  zsh-benchmark --detailed

${GREEN}OUTPUT:${NC}
  Average, min, max startup times
  Performance rating (Excellent/Good/Acceptable/Slow)

${GREEN}DETAILED MODE:${NC}
  Shows zprof output with:
  - Function call counts
  - Total time per function
  - Self time (excluding subcalls)
  - Top time-consuming operations

EOF
            exit 0
            ;;
        *)
            echo -e "${RED}Error: Unknown option $1${NC}" >&2
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

if [[ "$DETAILED" == true ]]; then
    echo -e "${BLUE}${BOLD}Detailed Profiling with zprof${NC}"
    echo ""

    # Create temp file with profiling enabled
    temp_zshrc=$(mktemp)
    cat > "$temp_zshrc" << 'PROFEOF'
zmodload zsh/zprof
source ~/.zshrc
zprof
PROFEOF

    # Run with profiling
    zsh -i -c "source $temp_zshrc"

    rm -f "$temp_zshrc"

else
    echo -e "${BLUE}${BOLD}Zsh Startup Benchmark${NC} (10 runs)"
    echo ""
    echo -n "Running: "

    times=()
    for i in {1..10}; do
        # Use high-resolution timing
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS
            start=$(perl -MTime::HiRes=time -e 'print time')
            zsh -i -c exit 2>/dev/null
            end=$(perl -MTime::HiRes=time -e 'print time')
            elapsed=$(perl -e "print int(($end - $start) * 1000)")
        else
            # Linux
            start=$(date +%s%N)
            zsh -i -c exit 2>/dev/null
            end=$(date +%s%N)
            elapsed=$(( (end - start) / 1000000 ))
        fi

        times+=($elapsed)
        echo -n "."
    done

    echo ""
    echo ""

    # Calculate statistics
    total=0
    min=${times[1]}
    max=${times[1]}

    for time in "${times[@]}"; do
        total=$((total + time))
        [[ $time -lt $min ]] && min=$time
        [[ $time -gt $max ]] && max=$time
    done

    avg=$((total / 10))

    # Display results
    echo -e "${BOLD}Results:${NC}"
    echo -e "  ${GREEN}Average:${NC} ${avg}ms"
    echo -e "  ${BLUE}Min:${NC}     ${min}ms"
    echo -e "  ${BLUE}Max:${NC}     ${max}ms"
    echo ""

    # Performance rating
    if [[ $avg -lt 200 ]]; then
        echo -e "${GREEN}${BOLD}✅ Excellent!${NC} (< 200ms)"
        echo "  Your shell startup is blazing fast! 🚀"
    elif [[ $avg -lt 500 ]]; then
        echo -e "${GREEN}${BOLD}✓ Good${NC} (200-500ms)"
        echo "  Your shell startup is fast and responsive."
    elif [[ $avg -lt 1000 ]]; then
        echo -e "${YELLOW}${BOLD}⚠ Acceptable${NC} (500-1000ms)"
        echo "  Shell startup is noticeable. Consider optimization."
        echo "  Run 'zsh-benchmark --detailed' to identify bottlenecks."
    else
        echo -e "${RED}${BOLD}❌ Slow${NC} (> 1000ms)"
        echo "  Shell startup is significantly slow!"
        echo "  ${BOLD}Recommended actions:${NC}"
        echo "    1. Run 'zsh-benchmark --detailed' for analysis"
        echo "    2. Check for heavy tools loading on startup"
        echo "    3. Consider lazy loading (mise, rbenv, nvm)"
        echo "    4. Run 'zsh-compile' to compile config files"
    fi

    echo ""
    echo -e "${BLUE}Tip:${NC} Run with --detailed for function-level profiling"
fi
