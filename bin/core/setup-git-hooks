#!/usr/bin/env bash
#
# setup-git-hooks - Install pre-commit hooks for the repository
#
# Installs pre-commit framework and configures hooks to enforce:
# - MINDSET constitutional rules
# - Code quality (shellcheck)
# - OpenSpec validation
# - Conventional commits
#

set -euo pipefail

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

usage() {
    cat << EOF
setup-git-hooks - Install pre-commit hooks

USAGE:
    setup-git-hooks [OPTIONS]

OPTIONS:
    --uninstall     Uninstall pre-commit hooks
    --update        Update hook scripts
    --help, -h      Show this help

DESCRIPTION:
    Installs pre-commit framework and configures hooks to enforce:
    - MINDSET constitutional rules (lowercase dirs, no emojis)
    - Code quality (shellcheck)
    - OpenSpec proposal validation
    - Conventional commit messages
    - LinkingManifest.json validation

EXAMPLES:
    # Install hooks
    setup-git-hooks

    # Update hook scripts
    setup-git-hooks --update

    # Remove hooks
    setup-git-hooks --uninstall

REQUIREMENTS:
    - Python 3 (for pre-commit framework)
    - jq (for JSON validation)
    - perl (for emoji detection)

EOF
}

check_dependencies() {
    local missing=()

    if ! command -v python3 &>/dev/null; then
        missing+=("python3")
    fi

    if ! command -v jq &>/dev/null; then
        missing+=("jq")
    fi

    if ! command -v perl &>/dev/null; then
        missing+=("perl")
    fi

    if [[ ${#missing[@]} -gt 0 ]]; then
        echo -e "${RED}ERROR: Missing required dependencies: ${missing[*]}${NC}"
        echo ""
        echo "Install with:"
        if [[ "$OSTYPE" == "darwin"* ]]; then
            echo "  brew install jq"
        else
            echo "  apt-get install jq"
        fi
        return 1
    fi
}

install_precommit() {
    echo -e "${BLUE}Installing pre-commit framework...${NC}"

    if ! command -v pre-commit &>/dev/null; then
        echo "Installing pre-commit..."
        python3 -m pip install --user pre-commit || {
            echo -e "${YELLOW}WARN: pip install failed, trying with --break-system-packages${NC}"
            python3 -m pip install --user --break-system-packages pre-commit
        }
    else
        echo "pre-commit already installed"
    fi

    # Verify installation
    if ! command -v pre-commit &>/dev/null; then
        echo -e "${RED}ERROR: pre-commit installation failed${NC}"
        echo "Try manual installation: python3 -m pip install --user pre-commit"
        return 1
    fi

    echo -e "${GREEN}pre-commit installed successfully${NC}"
}

install_hooks() {
    echo -e "${BLUE}Installing git hooks...${NC}"

    # Ensure hook scripts are executable
    chmod +x bin/git/hooks/*

    # Install pre-commit hooks
    if ! pre-commit install; then
        echo -e "${RED}ERROR: Failed to install pre-commit hooks${NC}"
        return 1
    fi

    # Install commit-msg hook
    if ! pre-commit install --hook-type commit-msg; then
        echo -e "${RED}ERROR: Failed to install commit-msg hook${NC}"
        return 1
    fi

    echo -e "${GREEN}Git hooks installed successfully${NC}"
}

uninstall_hooks() {
    echo -e "${BLUE}Uninstalling git hooks...${NC}"

    if command -v pre-commit &>/dev/null; then
        pre-commit uninstall
        pre-commit uninstall --hook-type commit-msg
    fi

    echo -e "${GREEN}Git hooks uninstalled${NC}"
}

update_hooks() {
    echo -e "${BLUE}Updating hook scripts...${NC}"

    # Ensure latest hook scripts are executable
    chmod +x bin/git/hooks/*

    # Update pre-commit hooks
    if command -v pre-commit &>/dev/null; then
        pre-commit clean
        pre-commit install --install-hooks
        pre-commit install --hook-type commit-msg --install-hooks
    fi

    echo -e "${GREEN}Hooks updated${NC}"
}

test_hooks() {
    echo -e "${BLUE}Testing hooks...${NC}"

    if command -v pre-commit &>/dev/null; then
        echo "Running hooks on all files (this may take a moment)..."
        if pre-commit run --all-files; then
            echo -e "${GREEN}All hooks passed!${NC}"
        else
            echo -e "${YELLOW}Some hooks reported issues${NC}"
            echo "This is normal - fix issues and commit again"
        fi
    fi
}

show_info() {
    cat << EOF

${GREEN}Pre-commit hooks installed successfully!${NC}

${BLUE}What's configured:${NC}
  - Shellcheck validation (errors only)
  - No emojis check (MINDSET Rule 2)
  - Lowercase directories check (MINDSET Rule 1)
  - LinkingManifest.json validation
  - OpenSpec proposal validation
  - Conventional commit messages
  - Trailing whitespace removal
  - YAML/JSON syntax validation

${BLUE}Usage:${NC}
  # Commit normally - hooks run automatically
  git commit -m "feat: add new feature"

  # Test hooks manually
  pre-commit run --all-files

  # Skip hooks (not recommended)
  git commit --no-verify

${BLUE}Updating hooks:${NC}
  setup-git-hooks --update

${BLUE}Configuration:${NC}
  .pre-commit-config.yaml
  bin/git/hooks/

EOF
}

main() {
    case "${1:-}" in
        --help|-h)
            usage
            exit 0
            ;;
        --uninstall)
            uninstall_hooks
            exit 0
            ;;
        --update)
            update_hooks
            exit 0
            ;;
        "")
            # Install
            ;;
        *)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
    esac

    # Check we're in a git repo
    if ! git rev-parse --git-dir &>/dev/null; then
        echo -e "${RED}ERROR: Not in a git repository${NC}"
        exit 1
    fi

    # Check dependencies
    check_dependencies || exit 1

    # Install pre-commit
    install_precommit || exit 1

    # Install hooks
    install_hooks || exit 1

    # Test hooks
    test_hooks

    # Show info
    show_info
}

main "$@"
