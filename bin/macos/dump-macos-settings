#!/bin/bash
#
# dump-macos-settings - Export current macOS system preferences
# Usage: dump-macos-settings [output-file]
# Example: dump-macos-settings ~/Desktop/my-settings.sh
#
# This script reads your current macOS settings and generates a shell script
# that can reproduce them on another machine or after a fresh install.

set -euo pipefail

readonly SCRIPT_NAME="$(basename "$0")"
DOTFILES_ROOT="${DOTFILES_ROOT:-$HOME/.config-fixing-dot-files-bugs}"
readonly DEFAULT_OUTPUT="$DOTFILES_ROOT/packages/macos/macos-settings-$(date +%Y%m%d-%H%M%S).sh"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

usage() {
    cat << EOF
Usage: $SCRIPT_NAME [output-file]

Export current macOS system preferences to a shell script.

Arguments:
  output-file    Optional path for output script (default: timestamped file in ~/.config)

Examples:
  $SCRIPT_NAME
  $SCRIPT_NAME ~/Desktop/my-macos-settings.sh
  $SCRIPT_NAME ./current-settings.sh

Output:
  Creates a shell script that can be run to apply the same settings
  on another Mac or after a fresh install.

Notes:
  - Reads system-wide and user-specific preferences
  - Does NOT capture passwords or sensitive data
  - Some settings require admin privileges to apply
  - Generated script should be reviewed before running
EOF
    exit 0
}

# Check for help flag
if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
    usage
fi

# Determine output file
OUTPUT_FILE="${1:-$DEFAULT_OUTPUT}"

# Ensure parent directory exists
OUTPUT_DIR="$(dirname "$OUTPUT_FILE")"
mkdir -p "$OUTPUT_DIR"

log_info "Dumping macOS settings to: $OUTPUT_FILE"
echo

# Start writing the output script
cat > "$OUTPUT_FILE" << 'HEADER'
#!/bin/bash
#
# macOS Settings Configuration Script
# Generated by dump-macos-settings
# Date: DATE_PLACEHOLDER
#
# This script configures macOS system preferences to match the source system.
# Review this script before running it!

# Ask for administrator password upfront
sudo -v

# Keep-alive: update existing sudo time stamp until script has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

echo "Applying macOS settings..."

###############################################################################
# System Information                                                          #
###############################################################################

HEADER

# Replace date placeholder
sed -i '' "s/DATE_PLACEHOLDER/$(date '+%Y-%m-%d %H:%M:%S')/" "$OUTPUT_FILE"

###############################################################################
# Capture System Settings
###############################################################################

log_info "Capturing system configuration..."

{
    echo "# Computer Name"
    echo "MACHINE_NAME=\"$(scutil --get ComputerName 2>/dev/null || echo 'Mac')\""
    echo ""
    echo "sudo scutil --set ComputerName \"\${MACHINE_NAME}\""
    echo "sudo scutil --set HostName \"\${MACHINE_NAME}\""
    echo "sudo scutil --set LocalHostName \"\${MACHINE_NAME}\""
    echo ""
} >> "$OUTPUT_FILE"

###############################################################################
# Global Preferences
###############################################################################

log_info "Capturing global preferences..."

{
    echo "###############################################################################"
    echo "# Global Preferences                                                          #"
    echo "###############################################################################"
    echo ""
} >> "$OUTPUT_FILE"

# Function to safely read and write defaults
dump_default() {
    local domain="$1"
    local key="$2"
    local description="${3:-}"

    local value
    value=$(defaults read "$domain" "$key" 2>/dev/null) || return 0

    # Output description
    printf "# %s\n" "$description"

    # Detect value type and format accordingly
    if [[ "$value" == "1" ]] || [[ "$value" == "0" ]]; then
        if [[ "$value" == "1" ]]; then
            printf "defaults write %s %s -bool true\n" "$domain" "$key"
        else
            printf "defaults write %s %s -bool false\n" "$domain" "$key"
        fi
    elif [[ "$value" =~ ^-?[0-9]+$ ]]; then
        printf "defaults write %s %s -int %s\n" "$domain" "$key" "$value"
    else
        printf "defaults write %s %s -string \"%s\"\n" "$domain" "$key" "$value"
    fi
    printf "\n"
}

# Keyboard & Input
{
    echo "# Keyboard & Input"
    dump_default "NSGlobalDomain" "KeyRepeat" "Key repeat rate"
    dump_default "NSGlobalDomain" "InitialKeyRepeat" "Initial key repeat delay"
    dump_default "NSGlobalDomain" "ApplePressAndHoldEnabled" "Press and hold for accents"
    dump_default "NSGlobalDomain" "AppleShowAllExtensions" "Show all file extensions"
} >> "$OUTPUT_FILE"

# Trackpad
{
    echo "# Trackpad"
    dump_default "com.apple.driver.AppleBluetoothMultitouch.trackpad" "Clicking" "Tap to click"
    dump_default "com.apple.AppleMultitouchTrackpad" "Clicking" "Tap to click (multitouch)"
    dump_default "com.apple.AppleMultitouchTrackpad" "TrackpadThreeFingerDrag" "Three finger drag"
    dump_default "com.apple.driver.AppleBluetoothMultitouch.trackpad" "TrackpadThreeFingerDrag" "Three finger drag (bluetooth)"
} >> "$OUTPUT_FILE"

###############################################################################
# Finder
###############################################################################

log_info "Capturing Finder preferences..."

{
    echo "###############################################################################"
    echo "# Finder                                                                      #"
    echo "###############################################################################"
    echo ""
    dump_default "com.apple.finder" "AppleShowAllFiles" "Show hidden files"
    dump_default "com.apple.finder" "ShowPathbar" "Show path bar"
    dump_default "com.apple.finder" "_FXSortFoldersFirst" "Keep folders on top"
    dump_default "com.apple.finder" "FXPreferredViewStyle" "Default view style"
    dump_default "com.apple.finder" "FXEnableExtensionChangeWarning" "Extension change warning"
    dump_default "com.apple.finder" "_FXShowPosixPathInTitle" "Show POSIX path in title"
    dump_default "com.apple.desktopservices" "DSDontWriteNetworkStores" "No .DS_Store on network"
    dump_default "com.apple.desktopservices" "DSDontWriteUSBStores" "No .DS_Store on USB"
} >> "$OUTPUT_FILE"

###############################################################################
# Dock
###############################################################################

log_info "Capturing Dock preferences..."

{
    echo "###############################################################################"
    echo "# Dock                                                                        #"
    echo "###############################################################################"
    echo ""
    dump_default "com.apple.dock" "orientation" "Dock position"
    dump_default "com.apple.dock" "autohide" "Auto-hide Dock"
    dump_default "com.apple.dock" "showhidden" "Translucent hidden apps"
    dump_default "com.apple.dock" "show-recents" "Show recent apps"
    dump_default "com.apple.dock" "tilesize" "Dock icon size"
    dump_default "com.apple.dock" "minimize-to-application" "Minimize to app icon"
    dump_default "com.apple.dock" "show-process-indicators" "Show app indicators"
} >> "$OUTPUT_FILE"

###############################################################################
# Safari
###############################################################################

log_info "Capturing Safari preferences..."

{
    echo "###############################################################################"
    echo "# Safari                                                                      #"
    echo "###############################################################################"
    echo ""
    dump_default "com.apple.Safari" "UniversalSearchEnabled" "Universal search"
    dump_default "com.apple.Safari" "SuppressSearchSuggestions" "Suppress search suggestions"
    dump_default "com.apple.Safari" "ShowFullURLInSmartSearchField" "Show full URL"
    dump_default "com.apple.Safari" "IncludeDevelopMenu" "Enable Develop menu"
    dump_default "com.apple.Safari" "WebKitDeveloperExtrasEnabledPreferenceKey" "Web Inspector"
    dump_default "com.apple.Safari" "WebKitJavaScriptCanOpenWindowsAutomatically" "Block popups"
} >> "$OUTPUT_FILE"

###############################################################################
# Terminal
###############################################################################

log_info "Capturing Terminal preferences..."

{
    echo "###############################################################################"
    echo "# Terminal                                                                    #"
    echo "###############################################################################"
    echo ""
    dump_default "com.apple.terminal" "SecureKeyboardEntry" "Secure keyboard entry"
} >> "$OUTPUT_FILE"

###############################################################################
# Mail
###############################################################################

log_info "Capturing Mail preferences..."

{
    echo "###############################################################################"
    echo "# Mail                                                                        #"
    echo "###############################################################################"
    echo ""
    dump_default "com.apple.mail" "AddressesIncludeNameOnPasteboard" "Copy email without name"
    dump_default "com.apple.mail" "DisableInlineAttachmentViewing" "Disable inline attachments"
} >> "$OUTPUT_FILE"

###############################################################################
# Screenshots
###############################################################################

log_info "Capturing screenshot preferences..."

{
    echo "###############################################################################"
    echo "# Screenshots                                                                 #"
    echo "###############################################################################"
    echo ""
    dump_default "com.apple.screencapture" "location" "Screenshot save location"
    dump_default "com.apple.screencapture" "type" "Screenshot format"
    dump_default "com.apple.screencapture" "disable-shadow" "Disable window shadows"
} >> "$OUTPUT_FILE"

###############################################################################
# Time Machine
###############################################################################

log_info "Capturing Time Machine preferences..."

{
    echo "###############################################################################"
    echo "# Time Machine                                                                #"
    echo "###############################################################################"
    echo ""
    dump_default "com.apple.TimeMachine" "DoNotOfferNewDisksForBackup" "Don't prompt for new disks"
} >> "$OUTPUT_FILE"

###############################################################################
# App Store
###############################################################################

log_info "Capturing App Store preferences..."

{
    echo "###############################################################################"
    echo "# App Store                                                                   #"
    echo "###############################################################################"
    echo ""
    dump_default "com.apple.SoftwareUpdate" "AutomaticCheckEnabled" "Automatic update check"
    dump_default "com.apple.SoftwareUpdate" "ScheduleFrequency" "Update check frequency"
    dump_default "com.apple.SoftwareUpdate" "AutomaticDownload" "Auto download updates"
    dump_default "com.apple.SoftwareUpdate" "CriticalUpdateInstall" "Auto install security updates"
} >> "$OUTPUT_FILE"

###############################################################################
# Photos
###############################################################################

log_info "Capturing Photos preferences..."

{
    echo "###############################################################################"
    echo "# Photos                                                                      #"
    echo "###############################################################################"
    echo ""
    if defaults -currentHost read com.apple.ImageCapture disableHotPlug &>/dev/null; then
        echo "# Prevent Photos from auto-opening"
        echo "defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true"
        echo ""
    fi
} >> "$OUTPUT_FILE"

###############################################################################
# Energy & Display
###############################################################################

log_info "Capturing energy settings..."

{
    echo "###############################################################################"
    echo "# Energy & Display                                                            #"
    echo "###############################################################################"
    echo ""
    echo "# Current power management settings:"
    pmset -g | sed 's/^/# /'
    echo ""
} >> "$OUTPUT_FILE"

###############################################################################
# Application Restart
###############################################################################

{
    echo "###############################################################################"
    echo "# Kill affected applications                                                  #"
    echo "###############################################################################"
    echo ""
    echo "for app in \"Dock\" \"Finder\" \"Mail\" \"Photos\" \"Safari\" \"SystemUIServer\" \"Terminal\"; do"
    echo "    killall \"\${app}\" >/dev/null 2>&1 || true"
    echo "done"
    echo ""
    echo 'echo "Done. Note that some of these changes require a logout/restart to take effect."'
} >> "$OUTPUT_FILE"

# Make the output script executable
chmod +x "$OUTPUT_FILE"

echo
log_success "Settings dumped successfully!"
echo
log_info "Output file: $OUTPUT_FILE"
log_info "File size: $(du -h "$OUTPUT_FILE" | cut -f1)"
log_info "Settings captured: $(grep -c "^defaults write" "$OUTPUT_FILE" 2>/dev/null || echo 0)"
echo
log_warning "Review the generated script before running it!"
log_info "To apply these settings: $OUTPUT_FILE"
echo
