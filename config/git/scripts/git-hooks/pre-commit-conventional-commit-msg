#!/bin/bash

source ${HOME}/.config/bin/prints
pgreen "Starting ${BLUE}${0}"

# Get the commit message file
commit_msg_file="$1"
commit_msg=$(cat "$commit_msg_file")

# Conventional commit pattern
# type(scope?): description  [breaking change: ?]
# Example: feat(auth): add login page
# Example: fix: correct typo
# Example: feat!: breaking change feature
commit_pattern='^(feat|fix|docs|style|refactor|test|chore|build|ci|perf)(\([a-z0-9-]+\))?(!)?: .+$'

# Breaking change pattern
breaking_pattern='^BREAKING CHANGE: '

# Skip merge commits
if echo "$commit_msg" | grep -q "^Merge branch"; then
    exit 0
fi

# Check if commit message matches conventional commit format
if ! echo "$commit_msg" | grep -qE "$commit_pattern" && ! echo "$commit_msg" | grep -qE "$breaking_pattern"; then
    echo -e "${RED}Error: Invalid commit message format${NC}"
    echo -e "${YELLOW}Commit message must follow the conventional commits specification:${NC}"
    echo -e "  ${GREEN}type(optional-scope): description${NC}"
    echo -e "\nValid types:"
    echo -e "  ${GREEN}feat${NC}     - A new feature"
    echo -e "  ${GREEN}fix${NC}      - A bug fix"
    echo -e "  ${GREEN}docs${NC}     - Documentation only changes"
    echo -e "  ${GREEN}style${NC}    - Changes that do not affect the meaning of the code"
    echo -e "  ${GREEN}refactor${NC} - A code change that neither fixes a bug nor adds a feature"
    echo -e "  ${GREEN}test${NC}     - Adding missing tests or correcting existing tests"
    echo -e "  ${GREEN}chore${NC}    - Changes to the build process or auxiliary tools"
    echo -e "  ${GREEN}build${NC}    - Changes that affect the build system or external dependencies"
    echo -e "  ${GREEN}ci${NC}       - Changes to CI configuration files and scripts"
    echo -e "  ${GREEN}perf${NC}     - Changes that improve performance"
    echo -e "\nExamples:"
    echo -e "  ${GREEN}feat(auth): add login page${NC}"
    echo -e "  ${GREEN}fix: correct memory leak${NC}"
    echo -e "  ${GREEN}docs: update README${NC}"
    echo -e "  ${GREEN}feat!: breaking change in API${NC}"
    echo -e "  ${GREEN}refactor(core): optimize image processing${NC}"
    exit 1
fi

exit 0