#!/usr/bin/env bash
# Git post-checkout hook for worktree management
# This hook runs after checking out a ref (branch, commit, etc.)

# Hook parameters
previous_head="$1"
new_head="$2"
branch_checkout="$3"

# Only proceed if this is a branch checkout
if [[ "$branch_checkout" != "1" ]]; then
    exit 0
fi

# Configuration
WORKTREE_HOOKS_ENABLED="${WORKTREE_HOOKS_ENABLED:-true}"
if [[ "$WORKTREE_HOOKS_ENABLED" != "true" ]]; then
    exit 0
fi

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_info() { echo -e "${BLUE}ðŸŒ³${NC} $1"; }
log_success() { echo -e "${GREEN}âœ…${NC} $1"; }
log_warning() { echo -e "${YELLOW}âš ${NC} $1"; }

# Get current branch name
current_branch="$(git branch --show-current)"

# Check if we're in a worktree
if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    worktree_root="$(git rev-parse --show-toplevel)"
    main_repo="$(git rev-parse --git-common-dir)"
    
    # If this is a worktree (not the main repo)
    if [[ "$worktree_root/.git" != "$main_repo" ]]; then
        log_info "Switched to branch '$current_branch' in worktree"
        
        # Update terminal title if supported
        if [[ -n "$TERM" && "$TERM" != "dumb" ]]; then
            printf '\033]0;%s - %s\007' "$(basename "$worktree_root")" "$current_branch"
        fi
        
        # Show worktree status
        if command -v git-worktree-manager.sh > /dev/null 2>&1; then
            echo
            git-worktree-manager.sh status
        fi
        
        # Check for package.json and suggest npm install if needed
        if [[ -f "package.json" ]]; then
            if [[ ! -d "node_modules" ]] || [[ "package.json" -nt "node_modules" ]]; then
                log_warning "package.json detected but node_modules is missing or outdated"
                log_info "Consider running: npm install"
            fi
        fi
        
        # Check for requirements.txt and suggest pip install if needed
        if [[ -f "requirements.txt" ]]; then
            if [[ ! -f ".venv/pyvenv.cfg" ]] || [[ "requirements.txt" -nt ".venv/pyvenv.cfg" ]]; then
                log_warning "requirements.txt detected but virtual environment might be outdated"
                log_info "Consider running: pip install -r requirements.txt"
            fi
        fi
        
        # Check for Cargo.toml and suggest cargo build if needed
        if [[ -f "Cargo.toml" ]]; then
            if [[ ! -d "target" ]] || [[ "Cargo.toml" -nt "target" ]]; then
                log_warning "Cargo.toml detected but target directory is missing or outdated"
                log_info "Consider running: cargo build"
            fi
        fi
        
        # Show git status if there are changes
        if ! git diff --quiet || ! git diff --cached --quiet; then
            echo
            log_info "Working directory status:"
            git status --short
        fi
        
        # Show recent commits
        echo
        log_info "Recent commits on '$current_branch':"
        git log --oneline --graph --decorate -5
        
    else
        log_info "Switched to branch '$current_branch' in main repository"
    fi
fi

exit 0
