#!/usr/bin/env bash
# Git pre-commit hook for worktree management
# This hook runs before each commit

# Configuration
WORKTREE_HOOKS_ENABLED="${WORKTREE_HOOKS_ENABLED:-true}"
WORKTREE_LINT_ENABLED="${WORKTREE_LINT_ENABLED:-true}"
WORKTREE_TEST_ENABLED="${WORKTREE_TEST_ENABLED:-false}"

if [[ "$WORKTREE_HOOKS_ENABLED" != "true" ]]; then
    exit 0
fi

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}üå≥${NC} $1"; }
log_success() { echo -e "${GREEN}‚úÖ${NC} $1"; }
log_warning() { echo -e "${YELLOW}‚ö†${NC} $1"; }
log_error() { echo -e "${RED}‚ùå${NC} $1"; }

# Get current branch name
current_branch="$(git branch --show-current)"

# Check if we're in a worktree
worktree_root="$(git rev-parse --show-toplevel)"
main_repo="$(git rev-parse --git-common-dir)"

if [[ "$worktree_root/.git" != "$main_repo" ]]; then
    log_info "Pre-commit checks for worktree '$current_branch'"
fi

# Check for merge conflicts
if git diff --cached --name-only | xargs grep -l "^<<<<<<< \|^======= \|^>>>>>>> " 2>/dev/null; then
    log_error "Merge conflict markers found in staged files"
    log_info "Please resolve conflicts before committing"
    exit 1
fi

# Check for debug statements (customize patterns as needed)
debug_patterns=(
    "console\.log"
    "debugger"
    "print\("
    "println!"
    "dbg!"
    "TODO:"
    "FIXME:"
    "HACK:"
)

staged_files="$(git diff --cached --name-only)"
if [[ -n "$staged_files" ]]; then
    for pattern in "${debug_patterns[@]}"; do
        if echo "$staged_files" | xargs grep -l "$pattern" 2>/dev/null; then
            log_warning "Found potential debug statements with pattern: $pattern"
            echo "Files:"
            echo "$staged_files" | xargs grep -l "$pattern" 2>/dev/null | sed 's/^/  - /'
            echo
            read -p "Continue with commit? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                log_info "Commit aborted"
                exit 1
            fi
            break
        fi
    done
fi

# Run linting if enabled
if [[ "$WORKTREE_LINT_ENABLED" == "true" ]]; then
    log_info "Running linters..."
    
    # JavaScript/TypeScript projects
    if [[ -f "package.json" ]] && command -v npm > /dev/null; then
        if npm run lint > /dev/null 2>&1; then
            log_success "Linting passed"
        else
            log_error "Linting failed"
            log_info "Run 'npm run lint' to see details"
            exit 1
        fi
    fi
    
    # Python projects
    if [[ -f "requirements.txt" ]] && command -v flake8 > /dev/null; then
        if flake8 . > /dev/null 2>&1; then
            log_success "Python linting passed"
        else
            log_error "Python linting failed"
            log_info "Run 'flake8 .' to see details"
            exit 1
        fi
    fi
    
    # Rust projects
    if [[ -f "Cargo.toml" ]] && command -v cargo > /dev/null; then
        if cargo clippy -- -D warnings > /dev/null 2>&1; then
            log_success "Rust linting passed"
        else
            log_error "Rust linting failed"
            log_info "Run 'cargo clippy' to see details"
            exit 1
        fi
    fi
fi

# Run tests if enabled
if [[ "$WORKTREE_TEST_ENABLED" == "true" ]]; then
    log_info "Running tests..."
    
    # JavaScript/TypeScript projects
    if [[ -f "package.json" ]] && command -v npm > /dev/null; then
        if npm test > /dev/null 2>&1; then
            log_success "Tests passed"
        else
            log_error "Tests failed"
            log_info "Run 'npm test' to see details"
            exit 1
        fi
    fi
    
    # Python projects
    if [[ -f "requirements.txt" ]] && command -v pytest > /dev/null; then
        if pytest > /dev/null 2>&1; then
            log_success "Python tests passed"
        else
            log_error "Python tests failed"
            log_info "Run 'pytest' to see details"
            exit 1
        fi
    fi
    
    # Rust projects
    if [[ -f "Cargo.toml" ]] && command -v cargo > /dev/null; then
        if cargo test > /dev/null 2>&1; then
            log_success "Rust tests passed"
        else
            log_error "Rust tests failed"
            log_info "Run 'cargo test' to see details"
            exit 1
        fi
    fi
fi

# Check commit message format (if commit message is provided via -m)
commit_msg_file=".git/COMMIT_EDITMSG"
if [[ -f "$commit_msg_file" ]]; then
    commit_msg="$(head -n 1 "$commit_msg_file")"
    
    # Check for conventional commit format (optional)
    if [[ -n "$commit_msg" ]] && ! echo "$commit_msg" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+"; then
        log_warning "Commit message doesn't follow conventional commit format"
        log_info "Consider using: type(scope): description"
        log_info "Types: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert"
    fi
fi

log_success "Pre-commit checks completed"
exit 0
